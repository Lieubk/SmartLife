###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                06/Jul/2016  15:51:38
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530ZNP\ZMain.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZMain\TI2530ZNP\ZMain.c" -D FEATURE_SYSTEM_STATS
#        -D POWER_SAVING -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\ZMain.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\ZMain.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZMain\TI2530ZNP\ZMain.c
      1          /**************************************************************************************************
      2            Filename:       ZMain.c
      3            Revised:        $Date: 2010-09-17 16:25:30 -0700 (Fri, 17 Sep 2010) $
      4            Revision:       $Revision: 23835 $
      5          
      6            Description:    Startup and shutdown code for ZStack
      7            Notes:          This version targets the Chipcon CC2530
      8          
      9          
     10            Copyright 2005-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /*********************************************************************
     42           * INCLUDES
     43           */
     44          
     45          #ifndef NONWK
     46          #include "AF.h"
     47          #endif
     48          #include "hal_adc.h"

   \                                 In  segment SFR_AN, at 0x9d
   \   unsigned char volatile __sfr SLEEPSTA
   \                     SLEEPSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0x9e
   \   unsigned char volatile __sfr CLKCONSTA
   \                     CLKCONSTA:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xbe
   \   unsigned char volatile __sfr SLEEPCMD
   \                     SLEEPCMD:
   \   000000                DS 1

   \                                 In  segment SFR_AN, at 0xc6
   \   unsigned char volatile __sfr CLKCONCMD
   \                     CLKCONCMD:
   \   000000                DS 1
     49          #include "hal_flash.h"
     50          #include "hal_lcd.h"
     51          #include "hal_led.h"
     52          #include "hal_drivers.h"
     53          #include "OnBoard.h"
     54          #include "OSAL.h"
     55          #include "OSAL_Nv.h"
     56          #include "ZComDef.h"
     57          #include "ZMAC.h"
     58          #include "znp_app.h"
     59          #include "SLS.h"
     60          
     61          extern void osal_start_znp( void );
     62          
     63          /*********************************************************************
     64           * LOCAL FUNCTIONS
     65           */
     66          
     67          static void zmain_ext_addr( void );
     68          #if defined ZCL_KEY_ESTABLISH
     69          static void zmain_cert_init( void );
     70          #endif
     71          static void zmain_dev_info( void );
     72          static void zmain_vdd_check( void );
     73          
     74          #ifdef LCD_SUPPORTED
     75          static void zmain_lcd_init( void );
     76          #endif
     77          
     78          
     79          static void LedTest( void );
     80          
     81          static void LedTest( void ){
                             ^
Warning[Pe177]: function "LedTest" was declared but never referenced
     82            P0DIR |= 0x01;
     83            P0_0 = 0;
     84          }
     85          /*********************************************************************
     86           * @fn      main
     87           * @brief   First function called after startup.
     88           * @return  don't care
     89           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     90          int main( void )
   \                     main:
     91          {
   \   000000                ; Auto size: 0
     92            // Turn off interrupts
     93            osal_int_disable( INTS_ALL );
   \   000000                ; Setup parameters for call to function osal_int_disable
   \   000000   79FF         MOV     R1,#-0x1
   \   000002   12....       LCALL   `??osal_int_disable::?relay`; Banked call to: osal_int_disable
     94          
     95            // Initialization for board related stuff such as LEDs
     96            HAL_BOARD_INIT();
   \   000005   53BEFB       ANL     0xbe,#0xfb
   \                     ??main_0:
   \   000008   E59D         MOV     A,0x9d
   \   00000A   A2E6         MOV     C,0xE0 /* A   */.6
   \   00000C   50FA         JNC     ??main_0
   \   00000E   00           NOP
   \   00000F   78F8         MOV     R0,#-0x8
   \   000011   7901         MOV     R1,#0x1
   \                     ??main_1:
   \   000013   00           NOP
   \   000014   E8           MOV     A,R0
   \   000015   24FF         ADD     A,#-0x1
   \   000017   18           DEC     R0
   \   000018   E9           MOV     A,R1
   \   000019   34FF         ADDC    A,#-0x1
   \   00001B   F9           MOV     R1,A
   \   00001C   E8           MOV     A,R0
   \   00001D   49           ORL     A,R1
   \   00001E   70F3         JNZ     ??main_1
   \   000020   75C680       MOV     0xc6,#-0x80
   \                     ??main_2:
   \   000023   7480         MOV     A,#-0x80
   \   000025   659E         XRL     A,0x9e
   \   000027   70FA         JNZ     ??main_2
   \   000029   43BE04       ORL     0xbe,#0x4
   \   00002C   906270       MOV     DPTR,#0x6270
   \   00002F   7408         MOV     A,#0x8
   \   000031   F0           MOVX    @DPTR,A
     97          
     98            // Make sure supply voltage is high enough to run
     99            zmain_vdd_check();
   \   000032   7E10         MOV     R6,#0x10
   \                     ??main_3:
   \   000034                ; Setup parameters for call to function HalAdcCheckVdd
   \   000034   794A         MOV     R1,#0x4a
   \   000036   12....       LCALL   `??HalAdcCheckVdd::?relay`; Banked call to: HalAdcCheckVdd
   \   000039   E9           MOV     A,R1
   \   00003A   60F8         JZ      ??main_3
   \   00003C   1E           DEC     R6
   \   00003D   EE           MOV     A,R6
   \   00003E   70F4         JNZ     ??main_3
    100          
    101            // Initialize board I/O
    102            InitBoard( OB_COLD );
   \   000040                ; Setup parameters for call to function InitBoard
   \   000040   7900         MOV     R1,#0x0
   \   000042   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
    103             
    104            // Initialze HAL drivers
    105            HalDriverInit();
   \   000045                ; Setup parameters for call to function HalDriverInit
   \   000045   12....       LCALL   `??HalDriverInit::?relay`; Banked call to: HalDriverInit
    106          
    107            // Initialize NV System
    108            osal_nv_init( NULL );
   \   000048                ; Setup parameters for call to function osal_nv_init
   \   000048   7A00         MOV     R2,#0x0
   \   00004A   7B00         MOV     R3,#0x0
   \   00004C   12....       LCALL   `??osal_nv_init::?relay`; Banked call to: osal_nv_init
    109          
    110            // Initialize and check the ZNP RF Test Mode NV items.
    111          //    znpTestRF();
    112          
    113            // Initialize the MAC
    114            ZMacInit();
   \   00004F                ; Setup parameters for call to function ZMacInit
   \   00004F   12....       LCALL   `??ZMacInit::?relay` ; Banked call to: ZMacInit
    115          
    116            // Determine the extended address
    117            zmain_ext_addr();
   \   000052                ; Setup parameters for call to function zmain_ext_addr
   \   000052   12....       LCALL   `??zmain_ext_addr::?relay`; Banked call to: zmain_ext_addr
    118          
    119          #if defined ZCL_KEY_ESTABLISH
    120            // Initialize the Certicom certificate information.
    121            zmain_cert_init();
    122          #endif
    123          
    124            // Initialize basic NV items
    125            zgInit();
   \   000055                ; Setup parameters for call to function zgInit
   \   000055   12....       LCALL   `??zgInit::?relay`   ; Banked call to: zgInit
    126          
    127          #ifndef NONWK
    128            // Since the AF isn't a task, call it's initialization routine
    129            afInit();
    130          #endif
    131          
    132            // Initialize the operating system
    133            osal_init_system();
   \   000058                ; Setup parameters for call to function osal_init_system
   \   000058   12....       LCALL   `??osal_init_system::?relay`; Banked call to: osal_init_system
    134          
    135            // Allow interrupts
    136            osal_int_enable( INTS_ALL );
   \   00005B                ; Setup parameters for call to function osal_int_enable
   \   00005B   79FF         MOV     R1,#-0x1
   \   00005D   12....       LCALL   `??osal_int_enable::?relay`; Banked call to: osal_int_enable
    137          
    138            // Final board initialization
    139            InitBoard( OB_READY );
   \   000060                ; Setup parameters for call to function InitBoard
   \   000060   7902         MOV     R1,#0x2
   \   000062   12....       LCALL   `??InitBoard::?relay`; Banked call to: InitBoard
    140          
    141            // Display information about this device
    142            zmain_dev_info();
    143          
    144            /* Display the device info on the LCD */
    145          #ifdef LCD_SUPPORTED
    146            zmain_lcd_init();
    147          #endif
    148          
    149          #ifdef WDT_IN_PM1
    150            /* If WDT is used, this is a good place to enable it. */
    151            WatchDogEnable( WDTIMX );
    152          #endif
    153            
    154            osal_start_znp(); // No Return from here
   \   000065                ; Setup parameters for call to function osal_start_znp
   \   000065   12....       LCALL   `??osal_start_znp::?relay`; Banked call to: osal_start_znp
    155            
    156            return 0;  // Shouldn't get here.
   \   000068   7A00         MOV     R2,#0x0
   \   00006A   7B00         MOV     R3,#0x0
   \   00006C   02....       LJMP    ?BRET
   \   00006F                REQUIRE SLEEPCMD
   \   00006F                REQUIRE SLEEPSTA
   \   00006F                REQUIRE CLKCONCMD
   \   00006F                REQUIRE CLKCONSTA
    157          } // main()
    158          
    159          /*********************************************************************
    160           * @fn      zmain_vdd_check
    161           * @brief   Check if the Vdd is OK to run the processor.
    162           * @return  Return if Vdd is ok; otherwise, flash LED, then reset
    163           *********************************************************************/
    164          static void zmain_vdd_check( void )
    165          {
    166            uint8 cnt = 16;
    167            
    168            do {
    169              while (!HalAdcCheckVdd(VDD_MIN_RUN));
    170            } while (--cnt);
    171          }
    172          
    173          /**************************************************************************************************
    174           * @fn          zmain_ext_addr
    175           *
    176           * @brief       Execute a prioritized search for a valid extended address and write the results
    177           *              into the OSAL NV system for use by the system. Temporary address not saved to NV.
    178           *
    179           * input parameters
    180           *
    181           * None.
    182           *
    183           * output parameters
    184           *
    185           * None.
    186           *
    187           * @return      None.
    188           **************************************************************************************************
    189           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    190          static void zmain_ext_addr(void)
   \                     zmain_ext_addr:
    191          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000                REQUIRE ?V2
   \   000000   74F5         MOV     A,#-0xb
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 11
   \   000005                ; Auto size: 8
   \   000005   74F8         MOV     A,#-0x8
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
    192            uint8 nullAddr[Z_EXTADDR_LEN] = {0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF};
   \   00000A   90....       MOV     DPTR,#`?<Constant {255, 255, 255, 255, 255, 255, 255,`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7408         MOV     A,#0x8
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
    193            uint8 writeNV = TRUE;
    194          
    195            // First check whether a non-erased extended address exists in the OSAL NV.
    196            if ((SUCCESS != osal_nv_item_init(ZCD_NV_EXTADDR, Z_EXTADDR_LEN, NULL))  ||
    197                (SUCCESS != osal_nv_read(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress)) ||
    198                (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN)))
   \   000016                ; Setup parameters for call to function osal_nv_item_init
   \   000016   F5..         MOV     ?V0,A
   \   000018   F5..         MOV     ?V1,A
   \   00001A   78..         MOV     R0,#?V0
   \   00001C   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00001F   7C08         MOV     R4,#0x8
   \   000021   7D00         MOV     R5,#0x0
   \   000023   7A01         MOV     R2,#0x1
   \   000025   7B00         MOV     R3,#0x0
   \   000027   12....       LCALL   `??osal_nv_item_init::?relay`; Banked call to: osal_nv_item_init
   \   00002A   7402         MOV     A,#0x2
   \   00002C   12....       LCALL   ?DEALLOC_XSTACK8
   \   00002F   E9           MOV     A,R1
   \   000030   7051         JNZ     ??zmain_ext_addr_0
   \   000032                ; Setup parameters for call to function osal_nv_read
   \   000032   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   000035   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   000038   78..         MOV     R0,#?V0
   \   00003A   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00003D   75..08       MOV     ?V0,#0x8
   \   000040   75..00       MOV     ?V1,#0x0
   \   000043   78..         MOV     R0,#?V0
   \   000045   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000048   7C00         MOV     R4,#0x0
   \   00004A   7D00         MOV     R5,#0x0
   \   00004C   7A01         MOV     R2,#0x1
   \   00004E   7B00         MOV     R3,#0x0
   \   000050   12....       LCALL   `??osal_nv_read::?relay`; Banked call to: osal_nv_read
   \   000053   7404         MOV     A,#0x4
   \   000055   12....       LCALL   ?DEALLOC_XSTACK8
   \   000058   E9           MOV     A,R1
   \   000059   7028         JNZ     ??zmain_ext_addr_0
   \   00005B                ; Setup parameters for call to function osal_memcmp
   \   00005B   A8..         MOV     R0,?XSP + 0
   \   00005D   A9..         MOV     R1,?XSP + 1
   \   00005F   88..         MOV     ?V0,R0
   \   000061   89..         MOV     ?V1,R1
   \   000063   75..00       MOV     ?V2,#0x0
   \   000066   78..         MOV     R0,#?V0
   \   000068   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   00006B   7C08         MOV     R4,#0x8
   \   00006D   7D00         MOV     R5,#0x0
   \   00006F   79..         MOV     R1,#aExtendedAddress & 0xff
   \   000071   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   000073   7B00         MOV     R3,#0x0
   \   000075   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   000078   7403         MOV     A,#0x3
   \   00007A   12....       LCALL   ?DEALLOC_XSTACK8
   \   00007D   E9           MOV     A,R1
   \   00007E   7003         JNZ     $+5
   \   000080   02....       LJMP    ??zmain_ext_addr_1 & 0xFFFF
    199            {
    200              // Attempt to read the extended address from the location on the lock bits page
    201              // where the programming tools know to reserve it.
    202              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IEEE_OSET, aExtendedAddress, Z_EXTADDR_LEN);
   \                     ??zmain_ext_addr_0:
   \   000083                ; Setup parameters for call to function HalFlashRead
   \   000083   75..08       MOV     ?V0,#0x8
   \   000086   75..00       MOV     ?V1,#0x0
   \   000089   78..         MOV     R0,#?V0
   \   00008B   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00008E   7C..         MOV     R4,#aExtendedAddress & 0xff
   \   000090   7D..         MOV     R5,#(aExtendedAddress >> 8) & 0xff
   \   000092   7AE8         MOV     R2,#-0x18
   \   000094   7B07         MOV     R3,#0x7
   \   000096   797F         MOV     R1,#0x7f
   \   000098   12....       LCALL   `??HalFlashRead::?relay`; Banked call to: HalFlashRead
   \   00009B   7402         MOV     A,#0x2
   \   00009D   12....       LCALL   ?DEALLOC_XSTACK8
    203          
    204              if (osal_memcmp(aExtendedAddress, nullAddr, Z_EXTADDR_LEN))
   \   0000A0                ; Setup parameters for call to function osal_memcmp
   \   0000A0   A8..         MOV     R0,?XSP + 0
   \   0000A2   A9..         MOV     R1,?XSP + 1
   \   0000A4   88..         MOV     ?V0,R0
   \   0000A6   89..         MOV     ?V1,R1
   \   0000A8   75..00       MOV     ?V2,#0x0
   \   0000AB   78..         MOV     R0,#?V0
   \   0000AD   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000B0   7C08         MOV     R4,#0x8
   \   0000B2   7D00         MOV     R5,#0x0
   \   0000B4   79..         MOV     R1,#aExtendedAddress & 0xff
   \   0000B6   7A..         MOV     R2,#(aExtendedAddress >> 8) & 0xff
   \   0000B8   7B00         MOV     R3,#0x0
   \   0000BA   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000BD   7403         MOV     A,#0x3
   \   0000BF   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000C2   E9           MOV     A,R1
   \   0000C3   6071         JZ      ??zmain_ext_addr_2
    205              {
    206                // Attempt to read the extended address from the designated location in the Info Page.
    207                if (!osal_memcmp((uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), nullAddr, Z_EXTADDR_LEN))
   \   0000C5                ; Setup parameters for call to function osal_memcmp
   \   0000C5   78..         MOV     R0,#?V0
   \   0000C7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000CA   7C08         MOV     R4,#0x8
   \   0000CC   7D00         MOV     R5,#0x0
   \   0000CE   790C         MOV     R1,#0xc
   \   0000D0   7A78         MOV     R2,#0x78
   \   0000D2   7B00         MOV     R3,#0x0
   \   0000D4   12....       LCALL   `??osal_memcmp::?relay`; Banked call to: osal_memcmp
   \   0000D7   7403         MOV     A,#0x3
   \   0000D9   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000DC   E9           MOV     A,R1
   \   0000DD   701D         JNZ     ??zmain_ext_addr_3
    208                {
    209                  osal_memcpy(aExtendedAddress, (uint8 *)(P_INFOPAGE+HAL_INFOP_IEEE_OSET), Z_EXTADDR_LEN);
   \   0000DF                ; Setup parameters for call to function osal_memcpy
   \   0000DF   75..0C       MOV     ?V0,#0xc
   \   0000E2   75..78       MOV     ?V1,#0x78
   \   0000E5   78..         MOV     R0,#?V0
   \   0000E7   12....       LCALL   ?PUSH_XSTACK_I_THREE
   \   0000EA   7C08         MOV     R4,#0x8
   \   0000EC   7D00         MOV     R5,#0x0
   \   0000EE   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   0000F0   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   0000F2   12....       LCALL   `??osal_memcpy::?relay`; Banked call to: osal_memcpy
   \   0000F5   7403         MOV     A,#0x3
   \   0000F7   12....       LCALL   ?DEALLOC_XSTACK8
   \   0000FA   803A         SJMP    ??zmain_ext_addr_2
    210                }
    211                else  // No valid extended address was found.
    212                {
    213                  uint8 idx;
    214                  
    215          #if !defined ( NV_RESTORE )
    216                  writeNV = FALSE;  // Make this a temporary IEEE address
    217          #endif
    218          
    219                  /* Attempt to create a sufficiently random extended address for expediency.
    220                   * Note: this is only valid/legal in a test environment and
    221                   *       must never be used for a commercial product.
    222                   */
    223                  for (idx = 0; idx < (Z_EXTADDR_LEN - 2);)
   \                     ??zmain_ext_addr_3:
   \   0000FC   7E00         MOV     R6,#0x0
    224                  {
    225                    uint16 randy = osal_rand();
   \                     ??zmain_ext_addr_4:
   \   0000FE                ; Setup parameters for call to function osal_rand
   \   0000FE   12....       LCALL   `??osal_rand::?relay`; Banked call to: osal_rand
   \   000101   8A..         MOV     ?V0,R2
    226                    aExtendedAddress[idx++] = LO_UINT16(randy);
   \   000103   EE           MOV     A,R6
   \   000104   FA           MOV     R2,A
   \   000105   74..         MOV     A,#aExtendedAddress & 0xff
   \   000107   2A           ADD     A,R2
   \   000108   F582         MOV     DPL,A
   \   00010A   E4           CLR     A
   \   00010B   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   00010D   F583         MOV     DPH,A
   \   00010F   E5..         MOV     A,?V0
   \   000111   F0           MOVX    @DPTR,A
   \   000112   0E           INC     R6
    227                    aExtendedAddress[idx++] = HI_UINT16(randy);
   \   000113   EE           MOV     A,R6
   \   000114   F8           MOV     R0,A
   \   000115   12....       LCALL   ?Subroutine0 & 0xFFFF
    228                  }
   \                     ??CrossCallReturnLabel_0:
   \   000118   EB           MOV     A,R3
   \   000119   F0           MOVX    @DPTR,A
   \   00011A   0E           INC     R6
   \   00011B   EE           MOV     A,R6
   \   00011C   C3           CLR     C
   \   00011D   9406         SUBB    A,#0x6
   \   00011F   40DD         JC      ??zmain_ext_addr_4
    229                  // Next-to-MSB identifies ZigBee devicetype.
    230          #if ZG_BUILD_COORDINATOR_TYPE && !ZG_BUILD_JOINING_TYPE
    231                  aExtendedAddress[idx++] = 0x10;
    232          #elif ZG_BUILD_RTRONLY_TYPE
    233                  aExtendedAddress[idx++] = 0x20;
    234          #else
    235                  aExtendedAddress[idx++] = 0x30;
   \   000121   08           INC     R0
   \   000122   12....       LCALL   ?Subroutine0 & 0xFFFF
   \                     ??CrossCallReturnLabel_1:
   \   000125   7430         MOV     A,#0x30
   \   000127   F0           MOVX    @DPTR,A
    236          #endif
    237                  // MSB has historical signficance.
    238                  aExtendedAddress[idx] = 0xF8;
   \   000128   08           INC     R0
   \   000129   74..         MOV     A,#aExtendedAddress & 0xff
   \   00012B   28           ADD     A,R0
   \   00012C   F582         MOV     DPL,A
   \   00012E   E4           CLR     A
   \   00012F   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000131   F583         MOV     DPH,A
   \   000133   74F8         MOV     A,#-0x8
   \   000135   F0           MOVX    @DPTR,A
    239                }
    240              }
    241          
    242              if (writeNV)
    243              {
    244                (void)osal_nv_write(ZCD_NV_EXTADDR, 0, Z_EXTADDR_LEN, aExtendedAddress);
   \                     ??zmain_ext_addr_2:
   \   000136                ; Setup parameters for call to function osal_nv_write
   \   000136   75....       MOV     ?V0,#aExtendedAddress & 0xff
   \   000139   75....       MOV     ?V1,#(aExtendedAddress >> 8) & 0xff
   \   00013C   78..         MOV     R0,#?V0
   \   00013E   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   000141   75..08       MOV     ?V0,#0x8
   \   000144   75..00       MOV     ?V1,#0x0
   \   000147   78..         MOV     R0,#?V0
   \   000149   12....       LCALL   ?PUSH_XSTACK_I_TWO
   \   00014C   7C00         MOV     R4,#0x0
   \   00014E   7D00         MOV     R5,#0x0
   \   000150   7A01         MOV     R2,#0x1
   \   000152   7B00         MOV     R3,#0x0
   \   000154   12....       LCALL   `??osal_nv_write::?relay`; Banked call to: osal_nv_write
   \   000157   7404         MOV     A,#0x4
   \   000159   12....       LCALL   ?DEALLOC_XSTACK8
    245              }
    246            }
    247          
    248            // Set the MAC PIB extended address according to results from above.
    249            (void)ZMacSetReq(MAC_EXTENDED_ADDRESS, aExtendedAddress);
   \                     ??zmain_ext_addr_1:
   \   00015C                ; Setup parameters for call to function ZMacSetReq
   \   00015C   7A..         MOV     R2,#aExtendedAddress & 0xff
   \   00015E   7B..         MOV     R3,#(aExtendedAddress >> 8) & 0xff
   \   000160   79E2         MOV     R1,#-0x1e
   \   000162   12....       LCALL   `??ZMacSetReq::?relay`; Banked call to: ZMacSetReq
    250          }
   \   000165   7408         MOV     A,#0x8
   \   000167   12....       LCALL   ?DEALLOC_XSTACK8
   \   00016A   7F03         MOV     R7,#0x3
   \   00016C   02....       LJMP    ?BANKED_LEAVE_XDATA

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   74..         MOV     A,#aExtendedAddress & 0xff
   \   000002   2E           ADD     A,R6
   \   000003   F582         MOV     DPL,A
   \   000005   E4           CLR     A
   \   000006   34..         ADDC    A,#(aExtendedAddress >> 8) & 0xff
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??main::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    main

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??zmain_ext_addr::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    zmain_ext_addr

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {255, 255, 255, 255, 255, 255, 255,`:
   \   000000   FF           DB 255
   \   000001   FF           DB 255
   \   000002   FF           DB 255
   \   000003   FF           DB 255
   \   000004   FF           DB 255
   \   000005   FF           DB 255
   \   000006   FF           DB 255
   \   000007   FF           DB 255
    251          
    252          #if defined ZCL_KEY_ESTABLISH
    253          /**************************************************************************************************
    254           * @fn          zmain_cert_init
    255           *
    256           * @brief       Initialize the Certicom certificate information.
    257           *
    258           * input parameters
    259           *
    260           * None.
    261           *
    262           * output parameters
    263           *
    264           * None.
    265           *
    266           * @return      None.
    267           **************************************************************************************************
    268           */
    269          static void zmain_cert_init(void)
    270          {
    271            uint8 certData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN];
    272            uint8 nullData[ZCL_KE_IMPLICIT_CERTIFICATE_LEN] = {
    273              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    274              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    275              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    276              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    277              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
    278              0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF
    279            };
    280          
    281            (void)osal_nv_item_init(ZCD_NV_IMPLICIT_CERTIFICATE, ZCL_KE_IMPLICIT_CERTIFICATE_LEN, NULL);
    282            (void)osal_nv_item_init(ZCD_NV_DEVICE_PRIVATE_KEY, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, NULL);
    283          
    284            // First check whether non-null certificate data exists in the OSAL NV. To save on code space,
    285            // just use the ZCD_NV_CA_PUBLIC_KEY as the bellwether for all three.
    286            if ((SUCCESS != osal_nv_item_init(ZCD_NV_CA_PUBLIC_KEY, ZCL_KE_CA_PUBLIC_KEY_LEN, NULL))    ||
    287                (SUCCESS != osal_nv_read(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData))  ||
    288                (osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN)))
    289            {
    290              // Attempt to read the certificate data from its corresponding location on the lock bits page.
    291              HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_CA_PUBLIC_KEY_OSET, certData,
    292                                                   ZCL_KE_CA_PUBLIC_KEY_LEN);
    293              // If the certificate data is not NULL, use it to update the corresponding NV items.
    294              if (!osal_memcmp(certData, nullData, ZCL_KE_CA_PUBLIC_KEY_LEN))
    295              {
    296                (void)osal_nv_write(ZCD_NV_CA_PUBLIC_KEY, 0, ZCL_KE_CA_PUBLIC_KEY_LEN, certData);
    297                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_IMPLICIT_CERT_OSET, certData,
    298                                                     ZCL_KE_IMPLICIT_CERTIFICATE_LEN);
    299                (void)osal_nv_write(ZCD_NV_IMPLICIT_CERTIFICATE, 0,
    300                                    ZCL_KE_IMPLICIT_CERTIFICATE_LEN, certData);
    301                HalFlashRead(HAL_FLASH_IEEE_PAGE, HAL_FLASH_DEV_PRIVATE_KEY_OSET, certData,
    302                                                  ZCL_KE_DEVICE_PRIVATE_KEY_LEN);
    303                (void)osal_nv_write(ZCD_NV_DEVICE_PRIVATE_KEY, 0, ZCL_KE_DEVICE_PRIVATE_KEY_LEN, certData);
    304              }
    305            }
    306          }
    307          #endif
    308          
    309          /**************************************************************************************************
    310           * @fn          zmain_dev_info
    311           *
    312           * @brief       This displays the IEEE (MSB to LSB) on the LCD.
    313           *
    314           * input parameters
    315           *
    316           * None.
    317           *
    318           * output parameters
    319           *
    320           * None.
    321           *
    322           * @return      None.
    323           **************************************************************************************************
    324           */
    325          static void zmain_dev_info(void)
    326          {
    327          #ifdef LCD_SUPPORTED
    328            uint8 i;
    329            uint8 *xad;
    330            uint8 lcd_buf[Z_EXTADDR_LEN*2+1];
    331          
    332            // Display the extended address.
    333            xad = aExtendedAddress + Z_EXTADDR_LEN - 1;
    334          
    335            for (i = 0; i < Z_EXTADDR_LEN*2; xad--)
    336            {
    337              uint8 ch;
    338              ch = (*xad >> 4) & 0x0F;
    339              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    340              ch = *xad & 0x0F;
    341              lcd_buf[i++] = ch + (( ch < 10 ) ? '0' : '7');
    342            }
    343            lcd_buf[Z_EXTADDR_LEN*2] = '\0';
    344            HalLcdWriteString( "IEEE: ", HAL_LCD_LINE_1 );
    345            HalLcdWriteString( (char*)lcd_buf, HAL_LCD_LINE_2 );
    346          #endif
    347          }
    348          
    349          #ifdef LCD_SUPPORTED
    350          /*********************************************************************
    351           * @fn      zmain_lcd_init
    352           * @brief   Initialize LCD at start up.
    353           * @return  none
    354           *********************************************************************/
    355          static void zmain_lcd_init ( void )
    356          {
    357          #ifdef SERIAL_DEBUG_SUPPORTED
    358            {
    359              HalLcdWriteString( "TexasInstruments", HAL_LCD_LINE_1 );
    360          
    361          #if defined( MT_MAC_FUNC )
    362          #if defined( ZDO_COORDINATOR )
    363                HalLcdWriteString( "MAC-MT Coord", HAL_LCD_LINE_2 );
    364          #else
    365                HalLcdWriteString( "MAC-MT Device", HAL_LCD_LINE_2 );
    366          #endif // ZDO
    367          #elif defined( MT_NWK_FUNC )
    368          #if defined( ZDO_COORDINATOR )
    369                HalLcdWriteString( "NWK Coordinator", HAL_LCD_LINE_2 );
    370          #else
    371                HalLcdWriteString( "NWK Device", HAL_LCD_LINE_2 );
    372          #endif // ZDO
    373          #endif // MT_FUNC
    374            }
    375          #endif // SERIAL_DEBUG_SUPPORTED
    376          }
    377          #endif
    378          
    379          /*********************************************************************
    380          *********************************************************************/

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      0      0   main
        0      0   -> HalAdcCheckVdd
        0      0   -> HalDriverInit
        0      0   -> InitBoard
        0      0   -> ZMacInit
        0      0   -> osal_init_system
        0      0   -> osal_int_disable
        0      0   -> osal_int_enable
        0      0   -> osal_nv_init
        0      0   -> osal_start_znp
        0      0   -> zgInit
        0      0   -> zmain_ext_addr
      1     23   zmain_ext_addr
        0     21   -> HalFlashRead
        0     19   -> ZMacSetReq
        0     22   -> osal_memcmp
        0     22   -> osal_memcpy
        0     21   -> osal_nv_item_init
        0     23   -> osal_nv_read
        0     23   -> osal_nv_write
        0     19   -> osal_rand


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       8  ?<Constant {255, 255, 255, 255, 255, 255, 255,
      11  ?Subroutine0
       1  CLKCONCMD
       1  CLKCONSTA
       1  SLEEPCMD
       1  SLEEPSTA
     111  main
       6  main::?relay
     367  zmain_ext_addr
       6  zmain_ext_addr::?relay

 
 489 bytes in segment BANKED_CODE
  12 bytes in segment BANK_RELAYS
   4 bytes in segment SFR_AN
   8 bytes in segment XDATA_ROM_C
 
 501 bytes of CODE  memory
   8 bytes of CONST memory
   0 bytes of DATA  memory (+ 4 bytes shared)

Errors: none
Warnings: 1
