###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                06/Jul/2016  15:51:34
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Memory.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Components\osal\common\OSAL_Memory.c" -D FEATURE_SYSTEM_STATS -D
#        POWER_SAVING -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\OSAL_Memory.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\OSAL_Memory.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Components\osal\common\OSAL_Memory.c
      1          /**************************************************************************************************
      2            Filename:       OSAL_Memory.c
      3            Revised:        $Date: 2013-03-14 17:58:51 -0700 (Thu, 14 Mar 2013) $
      4            Revision:       $Revision: 33490 $
      5          
      6            Description:    OSAL Heap Memory management functions. There is an Application Note that
      7                            should be read before studying and/or modifying this module:
      8                            SWRA204 "Heap Memory Management"
      9          
     10            Copyright 2004-2010 Texas Instruments Incorporated. All rights reserved.
     11          
     12            IMPORTANT: Your use of this Software is limited to those specific rights
     13            granted under the terms of a software license agreement between the user
     14            who downloaded the software, his/her employer (which must be your employer)
     15            and Texas Instruments Incorporated (the "License").  You may not use this
     16            Software unless you agree to abide by the terms of the License. The License
     17            limits your use, and you acknowledge, that the Software may not be modified,
     18            copied or distributed unless embedded on a Texas Instruments microcontroller
     19            or used solely and exclusively in conjunction with a Texas Instruments radio
     20            frequency transceiver, which is integrated into your product.  Other than for
     21            the foregoing purpose, you may not use, reproduce, copy, prepare derivative
     22            works of, modify, distribute, perform, display or sell this Software and/or
     23            its documentation for any purpose.
     24          
     25            YOU FURTHER ACKNOWLEDGE AND AGREE THAT THE SOFTWARE AND DOCUMENTATION ARE
     26            PROVIDED “AS IS” WITHOUT WARRANTY OF ANY KIND, EITHER EXPRESS OR IMPLIED,
     27            INCLUDING WITHOUT LIMITATION, ANY WARRANTY OF MERCHANTABILITY, TITLE,
     28            NON-INFRINGEMENT AND FITNESS FOR A PARTICULAR PURPOSE. IN NO EVENT SHALL
     29            TEXAS INSTRUMENTS OR ITS LICENSORS BE LIABLE OR OBLIGATED UNDER CONTRACT,
     30            NEGLIGENCE, STRICT LIABILITY, CONTRIBUTION, BREACH OF WARRANTY, OR OTHER
     31            LEGAL EQUITABLE THEORY ANY DIRECT OR INDIRECT DAMAGES OR EXPENSES
     32            INCLUDING BUT NOT LIMITED TO ANY INCIDENTAL, SPECIAL, INDIRECT, PUNITIVE
     33            OR CONSEQUENTIAL DAMAGES, LOST PROFITS OR LOST DATA, COST OF PROCUREMENT
     34            OF SUBSTITUTE GOODS, TECHNOLOGY, SERVICES, OR ANY CLAIMS BY THIRD PARTIES
     35            (INCLUDING BUT NOT LIMITED TO ANY DEFENSE THEREOF), OR OTHER SIMILAR COSTS.
     36          
     37            Should you have any questions regarding your right to use this Software,
     38            contact Texas Instruments Incorporated at www.TI.com.
     39          **************************************************************************************************/
     40          
     41          /* ------------------------------------------------------------------------------------------------
     42           *                                          Includes
     43           * ------------------------------------------------------------------------------------------------
     44           */
     45          
     46          #include "comdef.h"
     47          #include "OSAL.h"
     48          #include "OSAL_Memory.h"
     49          #include "OnBoard.h"

   \                                 In  segment SFR_AN, at 0xa8
   \   union <unnamed> volatile __sfr _A_IEN0
   \                     _A_IEN0:
   \   000000                DS 1
     50          #include "hal_mcu.h"
     51          #include "hal_assert.h"
     52          
     53          /* ------------------------------------------------------------------------------------------------
     54           *                                           Constants
     55           * ------------------------------------------------------------------------------------------------
     56           */
     57          
     58          #define OSALMEM_IN_USE             0x8000
     59          #if (MAXMEMHEAP & OSALMEM_IN_USE)
     60          #error MAXMEMHEAP is too big to manage!
     61          #endif
     62          
     63          #define OSALMEM_HDRSZ              sizeof(osalMemHdr_t)
     64          
     65          // Round a value up to the ceiling of OSALMEM_HDRSZ for critical dependencies on even multiples.
     66          #define OSALMEM_ROUND(X)       ((((X) + OSALMEM_HDRSZ - 1) / OSALMEM_HDRSZ) * OSALMEM_HDRSZ)
     67          
     68          /* Minimum wasted bytes to justify splitting a block before allocation.
     69           * Adjust accordingly to attempt to balance the tradeoff of wasted space and runtime throughput
     70           * spent splitting blocks into sizes that may not be practically usable when sandwiched between
     71           * two blocks in use (and thereby not able to be coalesced.)
     72           * Ensure that this size is an even multiple of OSALMEM_HDRSZ.
     73           */
     74          #if !defined OSALMEM_MIN_BLKSZ
     75          #define OSALMEM_MIN_BLKSZ         (OSALMEM_ROUND((OSALMEM_HDRSZ * 2)))
     76          #endif
     77          
     78          #if !defined OSALMEM_LL_BLKSZ
     79          #if defined NONWK
     80          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(6) + (1 * OSALMEM_HDRSZ))
     81          #else
     82          /*
     83           * Profiling the sample apps with default settings shows the following long-lived allocations
     84           * which should live at the bottom of the small-block bucket so that they are never iterated over
     85           * by osal_mem_alloc/free(), nor ever considered for coalescing, etc. This saves significant
     86           * run-time throughput (on 8051 SOC if not also MSP). This is dynamic "dead space" and is not
     87           * available to the small-block bucket heap.
     88           *
     89           * Adjust this size accordingly to accomodate application-specific changes including changing the
     90           * size of long-lived objects profiled by sample apps and long-lived objects added by application.
     91           */
     92          #if defined ZCL_KEY_ESTABLISH     // Attempt to capture worst-case for SE sample apps.
     93          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(526) + (32 * OSALMEM_HDRSZ))
     94          #elif defined TC_LINKKEY_JOIN
     95          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(454) + (21 * OSALMEM_HDRSZ))
     96          #elif ((defined SECURE) && (SECURE != 0))
     97          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(418) + (19 * OSALMEM_HDRSZ))
     98          #else
     99          #define OSALMEM_LL_BLKSZ          (OSALMEM_ROUND(417) + (19 * OSALMEM_HDRSZ))
    100          #endif
    101          #endif
    102          #endif
    103          
    104          /* Adjust accordingly to attempt to accomodate the block sizes of the vast majority of
    105           * very high frequency allocations/frees by profiling the system runtime.
    106           * This default of 16 accomodates the OSAL timers block, osalTimerRec_t, and many others.
    107           * Ensure that this size is an even multiple of OSALMEM_MIN_BLKSZ for run-time efficiency.
    108           */
    109          #if !defined OSALMEM_SMALL_BLKSZ
    110          #define OSALMEM_SMALL_BLKSZ       (OSALMEM_ROUND(16))
    111          #endif
    112          #if !defined OSALMEM_SMALL_BLKCNT
    113          #define OSALMEM_SMALL_BLKCNT       8
    114          #endif
    115          
    116          /*
    117           * These numbers setup the size of the small-block bucket which is reserved at the front of the
    118           * heap for allocations of OSALMEM_SMALL_BLKSZ or smaller.
    119           */
    120          
    121          // Size of the heap bucket reserved for small block-sized allocations.
    122          // Adjust accordingly to attempt to accomodate the vast majority of very high frequency operations.
    123          #define OSALMEM_SMALLBLK_BUCKET  ((OSALMEM_SMALL_BLKSZ * OSALMEM_SMALL_BLKCNT) + OSALMEM_LL_BLKSZ)
    124          // Index of the first available osalMemHdr_t after the small-block heap which will be set in-use in
    125          // order to prevent the small-block bucket from being coalesced with the wilderness.
    126          #define OSALMEM_SMALLBLK_HDRCNT   (OSALMEM_SMALLBLK_BUCKET / OSALMEM_HDRSZ)
    127          // Index of the first available osalMemHdr_t after the small-block heap which will be set in-use in
    128          #define OSALMEM_BIGBLK_IDX        (OSALMEM_SMALLBLK_HDRCNT + 1)
    129          // The size of the wilderness after losing the small-block heap, the wasted header to block the
    130          // small-block heap from being coalesced, and the wasted header to mark the end of the heap.
    131          #define OSALMEM_BIGBLK_SZ         (MAXMEMHEAP - OSALMEM_SMALLBLK_BUCKET - OSALMEM_HDRSZ*2)
    132          // Index of the last available osalMemHdr_t at the end of the heap which will be set to zero for
    133          // fast comparisons with zero to determine the end of the heap.
    134          #define OSALMEM_LASTBLK_IDX      ((MAXMEMHEAP / OSALMEM_HDRSZ) - 1)
    135          
    136          // For information about memory profiling, refer to SWRA204 "Heap Memory Management", section 1.5.
    137          #if !defined OSALMEM_PROFILER
    138          #define OSALMEM_PROFILER           TRUE  // Enable/disable the memory usage profiling buckets.
    139          #endif
    140          #if !defined OSALMEM_PROFILER_LL
    141          #define OSALMEM_PROFILER_LL        FALSE  // Special profiling of the Long-Lived bucket.
    142          #endif
    143          
    144          #if OSALMEM_PROFILER
    145          #define OSALMEM_INIT              'X'
    146          #define OSALMEM_ALOC              'A'
    147          #define OSALMEM_REIN              'F'
    148          #endif
    149          
    150          /* ------------------------------------------------------------------------------------------------
    151           *                                           Typedefs
    152           * ------------------------------------------------------------------------------------------------
    153           */
    154          
    155          typedef struct {
    156            // The 15 LSB's of 'val' indicate the total item size, including the header, in 8-bit bytes.
    157            unsigned len : 15;
    158            // The 1 MSB of 'val' is used as a boolean to indicate in-use or freed.
    159            unsigned inUse : 1;
    160          } osalMemHdrHdr_t;
    161          
    162          typedef union {
    163            /* Dummy variable so compiler forces structure to alignment of largest element while not wasting
    164             * space on targets when the halDataAlign_t is smaller than a UINT16.
    165             */
    166            halDataAlign_t alignDummy;
    167            uint16 val;
    168            osalMemHdrHdr_t hdr;
    169          } osalMemHdr_t;
    170          
    171          /* ------------------------------------------------------------------------------------------------
    172           *                                           Local Variables
    173           * ------------------------------------------------------------------------------------------------
    174           */
    175          
    176          #if !defined ( ZBIT )

   \                                 In  segment XDATA_N, align 1
    177          static __no_init osalMemHdr_t theHeap[MAXMEMHEAP / OSALMEM_HDRSZ];
   \                     theHeap:
   \   000000                DS 1000

   \                                 In  segment XDATA_N, align 1
    178          static __no_init osalMemHdr_t *ff1;  // First free block in the small-block bucket.
   \                     ff1:
   \   000000                DS 2
    179          #else
    180          static osalMemHdr_t theHeap[MAXMEMHEAP / OSALMEM_HDRSZ];
    181          static osalMemHdr_t *ff1;  // First free block in the small-block bucket.
    182          #endif
    183          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    184          static uint8 osalMemStat;            // Discrete status flags: 0x01 = kicked.
   \                     osalMemStat:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
    185          
    186          #if OSALMEM_METRICS
    187          static uint16 blkMax;  // Max cnt of all blocks ever seen at once.
    188          static uint16 blkCnt;  // Current cnt of all blocks.
    189          static uint16 blkFree; // Current cnt of free blocks.
    190          static uint16 memAlo;  // Current total memory allocated.
    191          static uint16 memMax;  // Max total memory ever allocated at once.
    192          #endif
    193          
    194          #if OSALMEM_PROFILER
    195          #define OSALMEM_PROMAX  8
    196          /* The profiling buckets must differ by at least OSALMEM_MIN_BLKSZ; the
    197           * last bucket must equal the max alloc size. Set the bucket sizes to
    198           * whatever sizes necessary to show how your application is using memory.
    199           */

   \                                 In  segment XDATA_I, align 1, keep-with-next
    200          static uint16 proCnt[OSALMEM_PROMAX] = {
   \                     proCnt:
   \   000000                DS 16
   \   000010                REQUIRE `?<Initializer for proCnt>`
   \   000010                REQUIRE __INIT_XDATA_I
    201          OSALMEM_SMALL_BLKSZ, 48, 112, 176, 192, 224, 256, 65535 };

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    202          static uint16 proCur[OSALMEM_PROMAX] = { 0 };
   \                     proCur:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    203          static uint16 proMax[OSALMEM_PROMAX] = { 0 };
   \                     proMax:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    204          static uint16 proTot[OSALMEM_PROMAX] = { 0 };
   \                     proTot:
   \   000000                DS 16
   \   000010                REQUIRE __INIT_XDATA_Z

   \                                 In  segment XDATA_Z, align 1, keep-with-next
    205          static uint16 proSmallBlkMiss;
   \                     proSmallBlkMiss:
   \   000000                DS 2
   \   000002                REQUIRE __INIT_XDATA_Z
    206          #endif
    207          
    208          /* ------------------------------------------------------------------------------------------------
    209           *                                           Global Variables
    210           * ------------------------------------------------------------------------------------------------
    211           */
    212          
    213          #ifdef DPRINTF_HEAPTRACE
    214          extern int dprintf(const char *fmt, ...);
    215          #endif /* DPRINTF_HEAPTRACE */
    216          
    217          /**************************************************************************************************
    218           * @fn          osal_mem_init
    219           *
    220           * @brief       This function is the OSAL heap memory management initialization callback.
    221           *
    222           * input parameters
    223           *
    224           * None.
    225           *
    226           * output parameters
    227           *
    228           * None.
    229           *
    230           * @return      None.
    231           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    232          void osal_mem_init(void)
   \                     osal_mem_init:
    233          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
    234            HAL_ASSERT(((OSALMEM_MIN_BLKSZ % OSALMEM_HDRSZ) == 0));
    235            HAL_ASSERT(((OSALMEM_LL_BLKSZ % OSALMEM_HDRSZ) == 0));
    236            HAL_ASSERT(((OSALMEM_SMALL_BLKSZ % OSALMEM_HDRSZ) == 0));
    237          
    238          #if OSALMEM_PROFILER
    239            (void)osal_memset(theHeap, OSALMEM_INIT, MAXMEMHEAP);
   \   000004                ; Setup parameters for call to function osal_memset
   \   000004   7CE8         MOV     R4,#-0x18
   \   000006   7D03         MOV     R5,#0x3
   \   000008   7958         MOV     R1,#0x58
   \   00000A   7A..         MOV     R2,#theHeap & 0xff
   \   00000C   7B..         MOV     R3,#(theHeap >> 8) & 0xff
   \   00000E   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    240          #endif
    241          
    242            // Setup a NULL block at the end of the heap for fast comparisons with zero.
    243            theHeap[OSALMEM_LASTBLK_IDX].val = 0;
   \   000011   90....       MOV     DPTR,#theHeap + 998
   \   000014   E4           CLR     A
   \   000015   F0           MOVX    @DPTR,A
   \   000016   A3           INC     DPTR
   \   000017   F0           MOVX    @DPTR,A
    244          
    245            // Setup the small-block bucket.
    246            ff1 = theHeap;
   \   000018   90....       MOV     DPTR,#ff1
   \   00001B   74..         MOV     A,#theHeap & 0xff
   \   00001D   F0           MOVX    @DPTR,A
   \   00001E   A3           INC     DPTR
   \   00001F   74..         MOV     A,#(theHeap >> 8) & 0xff
   \   000021   F0           MOVX    @DPTR,A
    247            ff1->val = OSALMEM_SMALLBLK_BUCKET;                   // Set 'len' & clear 'inUse' field.
   \   000022   90....       MOV     DPTR,#theHeap
   \   000025   7448         MOV     A,#0x48
   \   000027   F0           MOVX    @DPTR,A
   \   000028   A3           INC     DPTR
   \   000029   7402         MOV     A,#0x2
   \   00002B   F0           MOVX    @DPTR,A
    248            // Set 'len' & 'inUse' fields - this is a 'zero data bytes' lifetime allocation to block the
    249            // small-block bucket from ever being coalesced with the wilderness.
    250            theHeap[OSALMEM_SMALLBLK_HDRCNT].val = (OSALMEM_HDRSZ | OSALMEM_IN_USE);
   \   00002C   90....       MOV     DPTR,#theHeap + 584
   \   00002F   F0           MOVX    @DPTR,A
   \   000030   A3           INC     DPTR
   \   000031   7480         MOV     A,#-0x80
   \   000033   F0           MOVX    @DPTR,A
    251          
    252            // Setup the wilderness.
    253            theHeap[OSALMEM_BIGBLK_IDX].val = OSALMEM_BIGBLK_SZ;  // Set 'len' & clear 'inUse' field.
   \   000034   A3           INC     DPTR
   \   000035   749C         MOV     A,#-0x64
   \   000037   F0           MOVX    @DPTR,A
   \   000038   A3           INC     DPTR
   \   000039   7401         MOV     A,#0x1
   \   00003B   F0           MOVX    @DPTR,A
    254          
    255          #if ( OSALMEM_METRICS )
    256            /* Start with the small-block bucket and the wilderness - don't count the
    257             * end-of-heap NULL block nor the end-of-small-block NULL block.
    258             */
    259            blkCnt = blkFree = 2;
    260          #endif
    261          }
   \   00003C   D083         POP     DPH
   \   00003E   D082         POP     DPL
   \   000040   02....       LJMP    ?BRET
    262          
    263          /**************************************************************************************************
    264           * @fn          osal_mem_kick
    265           *
    266           * @brief       This function is the OSAL task initialization callback.
    267           * @brief       Kick the ff1 pointer out past the long-lived OSAL Task blocks.
    268           *              Invoke this once after all long-lived blocks have been allocated -
    269           *              presently at the end of osal_init_system().
    270           *
    271           * input parameters
    272           *
    273           * None.
    274           *
    275           * output parameters
    276           *
    277           * None.
    278           *
    279           * @return      None.
    280           */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    281          void osal_mem_kick(void)
   \                     osal_mem_kick:
    282          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
    283            halIntState_t intState;
    284            osalMemHdr_t *tmp = osal_mem_alloc(1);
   \   000005                ; Setup parameters for call to function osal_mem_alloc
   \   000005   7A01         MOV     R2,#0x1
   \   000007   7B00         MOV     R3,#0x0
   \   000009   12....       LCALL   `??osal_mem_alloc::?relay`; Banked call to: osal_mem_alloc
   \   00000C   8A..         MOV     ?V0,R2
   \   00000E   8B..         MOV     ?V1,R3
   \   000010   AE..         MOV     R6,?V0
   \   000012   AF..         MOV     R7,?V1
    285          
    286            HAL_ASSERT((tmp != NULL));
   \   000014   EE           MOV     A,R6
   \   000015   4F           ORL     A,R7
   \   000016   7003         JNZ     ??osal_mem_kick_0
   \   000018                ; Setup parameters for call to function halAssertHandler
   \   000018   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    287            HAL_ENTER_CRITICAL_SECTION(intState);  // Hold off interrupts.
   \                     ??osal_mem_kick_0:
   \   00001B   85A8..       MOV     ?V0,0xa8+0x0
   \   00001E   C2AF         CLR     0xa8.7
    288          
    289            /* All long-lived allocations have filled the LL block reserved in the small-block bucket.
    290             * Set 'osalMemStat' so searching for memory in this bucket from here onward will only be done
    291             * for sizes meeting the OSALMEM_SMALL_BLKSZ criteria.
    292             */
    293            ff1 = tmp - 1;       // Set 'ff1' to point to the first available memory after the LL block.
   \   000020   EE           MOV     A,R6
   \   000021   24FE         ADD     A,#-0x2
   \   000023   F8           MOV     R0,A
   \   000024   EF           MOV     A,R7
   \   000025   34FF         ADDC    A,#-0x1
   \   000027   F9           MOV     R1,A
   \   000028   90....       MOV     DPTR,#ff1
   \   00002B   E8           MOV     A,R0
   \   00002C   F0           MOVX    @DPTR,A
   \   00002D   A3           INC     DPTR
   \   00002E   E9           MOV     A,R1
   \   00002F   F0           MOVX    @DPTR,A
    294            osal_mem_free(tmp);
   \   000030                ; Setup parameters for call to function osal_mem_free
   \   000030   EE           MOV     A,R6
   \   000031   FA           MOV     R2,A
   \   000032   EF           MOV     A,R7
   \   000033   FB           MOV     R3,A
   \   000034   12....       LCALL   `??osal_mem_free::?relay`; Banked call to: osal_mem_free
    295            osalMemStat = 0x01;  // Set 'osalMemStat' after the free because it enables memory profiling.
   \   000037   90....       MOV     DPTR,#osalMemStat
   \   00003A   7401         MOV     A,#0x1
   \   00003C   F0           MOVX    @DPTR,A
    296          
    297            HAL_EXIT_CRITICAL_SECTION(intState);  // Re-enable interrupts.
   \   00003D   E5..         MOV     A,?V0
   \   00003F   A2E7         MOV     C,0xE0 /* A   */.7
   \   000041   E4           CLR     A
   \   000042   33           RLC     A
   \   000043   F8           MOV     R0,A
   \   000044   E5..         MOV     A,?V0
   \   000046   A2E7         MOV     C,0xE0 /* A   */.7
   \   000048   92AF         MOV     0xa8.7,C
    298          }
   \   00004A   7F02         MOV     R7,#0x2
   \   00004C   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   00004F                REQUIRE _A_IEN0
    299          
    300          /**************************************************************************************************
    301           * @fn          osal_mem_alloc
    302           *
    303           * @brief       This function implements the OSAL dynamic memory allocation functionality.
    304           *
    305           * input parameters
    306           *
    307           * @param size - the number of bytes to allocate from the HEAP.
    308           *
    309           * output parameters
    310           *
    311           * None.
    312           *
    313           * @return      None.
    314           */
    315          #ifdef DPRINTF_OSALHEAPTRACE
    316          void *osal_mem_alloc_dbg( uint16 size, const char *fname, unsigned lnum )
    317          #else /* DPRINTF_OSALHEAPTRACE */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    318          void *osal_mem_alloc( uint16 size )
   \                     osal_mem_alloc:
    319          #endif /* DPRINTF_OSALHEAPTRACE */
    320          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V2
   \   000000                REQUIRE ?V3
   \   000000                REQUIRE ?V4
   \   000000                REQUIRE ?V5
   \   000000   74F2         MOV     A,#-0xe
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 14
   \   000005                ; Auto size: 0
    321            osalMemHdr_t *prev = NULL;
   \   000005   7800         MOV     R0,#0x0
   \   000007   7900         MOV     R1,#0x0
    322            osalMemHdr_t *hdr;
    323            halIntState_t intState;
    324            uint8 coal = 0;
   \   000009   7C00         MOV     R4,#0x0
    325          
    326            size += OSALMEM_HDRSZ;
   \   00000B   EA           MOV     A,R2
   \   00000C   2402         ADD     A,#0x2
   \   00000E   FA           MOV     R2,A
   \   00000F   E4           CLR     A
   \   000010   3B           ADDC    A,R3
   \   000011   FB           MOV     R3,A
    327          
    328            // Calculate required bytes to add to 'size' to align to halDataAlign_t.
    329            if ( sizeof( halDataAlign_t ) == 2 )
    330            {
    331              size += (size & 0x01);
    332            }
    333            else if ( sizeof( halDataAlign_t ) != 1 )
    334            {
    335              const uint8 mod = size % sizeof( halDataAlign_t );
    336          
    337              if ( mod != 0 )
    338              {
    339                size += (sizeof( halDataAlign_t ) - mod);
    340              }
    341            }
    342          
    343            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \   000012   A2AF         MOV     C,0xa8.7
   \   000014   E4           CLR     A
   \   000015   33           RLC     A
   \   000016   F5..         MOV     ?V0,A
   \   000018   C2AF         CLR     0xa8.7
    344          
    345            // Smaller allocations are first attempted in the small-block bucket, and all long-lived
    346            // allocations are channeled into the LL block reserved within this bucket.
    347            if ((osalMemStat == 0) || (size <= OSALMEM_SMALL_BLKSZ))
   \   00001A   90....       MOV     DPTR,#osalMemStat
   \   00001D   E0           MOVX    A,@DPTR
   \   00001E   6008         JZ      ??osal_mem_alloc_0
   \   000020   EA           MOV     A,R2
   \   000021   9411         SUBB    A,#0x11
   \   000023   EB           MOV     A,R3
   \   000024   9400         SUBB    A,#0x0
   \   000026   500A         JNC     ??osal_mem_alloc_1
    348            {
    349              hdr = ff1;
   \                     ??osal_mem_alloc_0:
   \   000028   90....       MOV     DPTR,#ff1
   \   00002B   E0           MOVX    A,@DPTR
   \   00002C   FE           MOV     R6,A
   \   00002D   A3           INC     DPTR
   \   00002E   E0           MOVX    A,@DPTR
   \   00002F   FF           MOV     R7,A
   \   000030   8004         SJMP    ??osal_mem_alloc_2
    350            }
    351            else
    352            {
    353              hdr = (theHeap + OSALMEM_BIGBLK_IDX);
   \                     ??osal_mem_alloc_1:
   \   000032   7E..         MOV     R6,#(theHeap + 74) & 0xff
   \   000034   7F..         MOV     R7,#((theHeap + 586) >> 8) & 0xff
    354            }
    355          
    356            do
    357            {
    358              if ( hdr->hdr.inUse )
   \                     ??osal_mem_alloc_2:
   \   000036   8E82         MOV     DPL,R6
   \   000038   8F83         MOV     DPH,R7
   \   00003A   A3           INC     DPTR
   \   00003B   E0           MOVX    A,@DPTR
   \   00003C   5480         ANL     A,#0x80
   \   00003E   6005         JZ      ??osal_mem_alloc_3
    359              {
    360                coal = 0;
   \   000040   7C00         MOV     R4,#0x0
   \   000042   02....       LJMP    ??osal_mem_alloc_4 & 0xFFFF
    361              }
    362              else
    363              {
    364                if ( coal != 0 )
   \                     ??osal_mem_alloc_3:
   \   000045   EC           MOV     A,R4
   \   000046   A2E0         MOV     C,0xE0 /* A   */.0
   \   000048   5079         JNC     ??osal_mem_alloc_5
    365                {
    366          #if ( OSALMEM_METRICS )
    367                  blkCnt--;
    368                  blkFree--;
    369          #endif
    370          
    371                  prev->hdr.len += hdr->hdr.len;
   \   00004A   8882         MOV     DPL,R0
   \   00004C   8983         MOV     DPH,R1
   \   00004E   E0           MOVX    A,@DPTR
   \   00004F   F5..         MOV     ?V2,A
   \   000051   A3           INC     DPTR
   \   000052   E0           MOVX    A,@DPTR
   \   000053   F5..         MOV     ?V3,A
   \   000055   5480         ANL     A,#0x80
   \   000057   F5..         MOV     ?V5,A
   \   000059   8E82         MOV     DPL,R6
   \   00005B   8F83         MOV     DPH,R7
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   25..         ADD     A,?V2
   \   000060   F5..         MOV     ?V2,A
   \   000062   A3           INC     DPTR
   \   000063   E0           MOVX    A,@DPTR
   \   000064   35..         ADDC    A,?V3
   \   000066   547F         ANL     A,#0x7f
   \   000068   F5..         MOV     ?V3,A
   \   00006A   E5..         MOV     A,?V5
   \   00006C   45..         ORL     A,?V3
   \   00006E   F5..         MOV     ?V3,A
   \   000070   8882         MOV     DPL,R0
   \   000072   8983         MOV     DPH,R1
   \   000074   E5..         MOV     A,?V2
   \   000076   F0           MOVX    @DPTR,A
   \   000077   A3           INC     DPTR
   \   000078   E5..         MOV     A,?V3
   \   00007A   F0           MOVX    @DPTR,A
    372          
    373                  if ( prev->hdr.len >= size )
   \   00007B   547F         ANL     A,#0x7f
   \   00007D   F5..         MOV     ?V3,A
   \   00007F   C3           CLR     C
   \   000080   E5..         MOV     A,?V2
   \   000082   9A           SUBB    A,R2
   \   000083   E5..         MOV     A,?V3
   \   000085   9B           SUBB    A,R3
   \   000086   4049         JC      ??osal_mem_alloc_4
    374                  {
    375                    hdr = prev;
   \   000088   E8           MOV     A,R0
   \   000089   FE           MOV     R6,A
   \   00008A   E9           MOV     A,R1
   \   00008B   FF           MOV     R7,A
    376                    break;
    377                  }
    378                }
    379                else
    380                {
    381                  if ( hdr->hdr.len >= size )
    382                  {
    383                    break;
    384                  }
    385          
    386                  coal = 1;
    387                  prev = hdr;
    388                }
    389              }
    390          
    391              hdr = (osalMemHdr_t *)((uint8 *)hdr + hdr->hdr.len);
    392          
    393              if ( hdr->val == 0 )
    394              {
    395                hdr = NULL;
    396                break;
    397              }
    398            } while (1);
    399          
    400            if ( hdr != NULL )
   \                     ??osal_mem_alloc_6:
   \   00008C   EE           MOV     A,R6
   \   00008D   4F           ORL     A,R7
   \   00008E   7003         JNZ     $+5
   \   000090   02....       LJMP    ??osal_mem_alloc_7 & 0xFFFF
    401            {
    402              uint16 tmp = hdr->hdr.len - size;
   \   000093   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_11:
   \   000096   E8           MOV     A,R0
   \   000097   C3           CLR     C
   \   000098   9A           SUBB    A,R2
   \   000099   F8           MOV     R0,A
   \   00009A   E9           MOV     A,R1
   \   00009B   9B           SUBB    A,R3
   \   00009C   F9           MOV     R1,A
    403          
    404              // Determine whether the threshold for splitting is met.
    405              if ( tmp >= OSALMEM_MIN_BLKSZ )
   \   00009D   C3           CLR     C
   \   00009E   E8           MOV     A,R0
   \   00009F   9404         SUBB    A,#0x4
   \   0000A1   E9           MOV     A,R1
   \   0000A2   9400         SUBB    A,#0x0
   \   0000A4   405B         JC      ??osal_mem_alloc_8
    406              {
    407                // Split the block before allocating it.
    408                osalMemHdr_t *next = (osalMemHdr_t *)((uint8 *)hdr + size);
    409                next->val = tmp;                     // Set 'len' & clear 'inUse' field.
   \   0000A6   EE           MOV     A,R6
   \   0000A7   2A           ADD     A,R2
   \   0000A8   F582         MOV     DPL,A
   \   0000AA   EF           MOV     A,R7
   \   0000AB   3B           ADDC    A,R3
   \   0000AC   F583         MOV     DPH,A
   \   0000AE   E8           MOV     A,R0
   \   0000AF   F0           MOVX    @DPTR,A
   \   0000B0   A3           INC     DPTR
   \   0000B1   E9           MOV     A,R1
   \   0000B2   F0           MOVX    @DPTR,A
    410                hdr->val = (size | OSALMEM_IN_USE);  // Set 'len' & 'inUse' field.
   \   0000B3   EA           MOV     A,R2
   \   0000B4   F8           MOV     R0,A
   \   0000B5   EB           MOV     A,R3
   \   0000B6   4480         ORL     A,#0x80
   \   0000B8   F9           MOV     R1,A
   \   0000B9   8E82         MOV     DPL,R6
   \   0000BB   8F83         MOV     DPH,R7
   \   0000BD   E8           MOV     A,R0
   \   0000BE   F0           MOVX    @DPTR,A
   \   0000BF   A3           INC     DPTR
   \   0000C0   E9           MOV     A,R1
   \   0000C1   8046         SJMP    ??osal_mem_alloc_9
    411          
    412          #if ( OSALMEM_METRICS )
    413                blkCnt++;
    414                if ( blkMax < blkCnt )
    415                {
    416                  blkMax = blkCnt;
    417                }
    418                memAlo += size;
    419          #endif
    420              }
   \                     ??osal_mem_alloc_5:
   \   0000C3   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_9:
   \   0000C6   9A           SUBB    A,R2
   \   0000C7   E9           MOV     A,R1
   \   0000C8   9B           SUBB    A,R3
   \   0000C9   50C1         JNC     ??osal_mem_alloc_6
   \   0000CB   7C01         MOV     R4,#0x1
   \   0000CD   EE           MOV     A,R6
   \   0000CE   F8           MOV     R0,A
   \   0000CF   EF           MOV     A,R7
   \   0000D0   F9           MOV     R1,A
   \                     ??osal_mem_alloc_4:
   \   0000D1   8E82         MOV     DPL,R6
   \   0000D3   8F83         MOV     DPH,R7
   \   0000D5   E0           MOVX    A,@DPTR
   \   0000D6   F5..         MOV     ?V2,A
   \   0000D8   A3           INC     DPTR
   \   0000D9   E0           MOVX    A,@DPTR
   \   0000DA   547F         ANL     A,#0x7f
   \   0000DC   F5..         MOV     ?V3,A
   \   0000DE   EE           MOV     A,R6
   \   0000DF   25..         ADD     A,?V2
   \   0000E1   FE           MOV     R6,A
   \   0000E2   EF           MOV     A,R7
   \   0000E3   35..         ADDC    A,?V3
   \   0000E5   FF           MOV     R7,A
   \   0000E6   8E82         MOV     DPL,R6
   \   0000E8   8F83         MOV     DPH,R7
   \   0000EA   E0           MOVX    A,@DPTR
   \   0000EB   F5..         MOV     ?V2,A
   \   0000ED   A3           INC     DPTR
   \   0000EE   E0           MOVX    A,@DPTR
   \   0000EF   F5..         MOV     ?V3,A
   \   0000F1   E5..         MOV     A,?V2
   \   0000F3   45..         ORL     A,?V3
   \   0000F5   6003         JZ      $+5
   \   0000F7   02....       LJMP    ??osal_mem_alloc_2 & 0xFFFF
   \   0000FA   7E00         MOV     R6,#0x0
   \   0000FC   7F00         MOV     R7,#0x0
   \   0000FE   02....       LJMP    ??osal_mem_alloc_7 & 0xFFFF
    421              else
    422              {
    423          #if ( OSALMEM_METRICS )
    424                memAlo += hdr->hdr.len;
    425                blkFree--;
    426          #endif
    427          
    428                hdr->hdr.inUse = TRUE;
   \                     ??osal_mem_alloc_8:
   \   000101   8E82         MOV     DPL,R6
   \   000103   8F83         MOV     DPH,R7
   \   000105   A3           INC     DPTR
   \   000106   E0           MOVX    A,@DPTR
   \   000107   4480         ORL     A,#0x80
   \                     ??osal_mem_alloc_9:
   \   000109   F0           MOVX    @DPTR,A
    429              }
    430          
    431          #if ( OSALMEM_METRICS )
    432              if ( memMax < memAlo )
    433              {
    434                memMax = memAlo;
    435              }
    436          #endif
    437          
    438          #if ( OSALMEM_PROFILER )
    439          #if !OSALMEM_PROFILER_LL
    440              if (osalMemStat != 0)  // Don't profile until after the LL block is filled.
   \   00010A   90....       MOV     DPTR,#osalMemStat
   \   00010D   E0           MOVX    A,@DPTR
   \   00010E   7003         JNZ     $+5
   \   000110   02....       LJMP    ??CrossCallReturnLabel_2 & 0xFFFF
    441          #endif
    442              {
    443                uint8 idx;
    444          
    445                for ( idx = 0; idx < OSALMEM_PROMAX; idx++ )
   \   000113   7A00         MOV     R2,#0x0
    446                {
    447                  if ( hdr->hdr.len <= proCnt[idx] )
   \                     ??osal_mem_alloc_10:
   \   000115   12....       LCALL   ?Subroutine2 & 0xFFFF
    448                  {
    449                    break;
    450                  }
    451                }
   \                     ??CrossCallReturnLabel_5:
   \   000118   C082         PUSH    DPL
   \   00011A   C083         PUSH    DPH
   \   00011C   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_12:
   \   00011F   D083         POP     DPH
   \   000121   D082         POP     DPL
   \   000123   C3           CLR     C
   \   000124   E0           MOVX    A,@DPTR
   \   000125   98           SUBB    A,R0
   \   000126   A3           INC     DPTR
   \   000127   E0           MOVX    A,@DPTR
   \   000128   99           SUBB    A,R1
   \   000129   5007         JNC     ??osal_mem_alloc_11
   \   00012B   0A           INC     R2
   \   00012C   EA           MOV     A,R2
   \   00012D   C3           CLR     C
   \   00012E   9408         SUBB    A,#0x8
   \   000130   40E3         JC      ??osal_mem_alloc_10
    452                proCur[idx]++;
   \                     ??osal_mem_alloc_11:
   \   000132   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_20:
   \   000135   FC           MOV     R4,A
   \   000136   74..         MOV     A,#(proCur >> 8) & 0xff
   \   000138   39           ADDC    A,R1
   \   000139   FD           MOV     R5,A
   \   00013A   8C82         MOV     DPL,R4
   \   00013C   8D83         MOV     DPH,R5
   \   00013E   12....       LCALL   ?Subroutine0 & 0xFFFF
    453                if ( proMax[idx] < proCur[idx] )
   \                     ??CrossCallReturnLabel_0:
   \   000141   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_15:
   \   000144   C082         PUSH    DPL
   \   000146   C083         PUSH    DPH
   \   000148   8C82         MOV     DPL,R4
   \   00014A   8D83         MOV     DPH,R5
   \   00014C   E0           MOVX    A,@DPTR
   \   00014D   F8           MOV     R0,A
   \   00014E   A3           INC     DPTR
   \   00014F   E0           MOVX    A,@DPTR
   \   000150   F9           MOV     R1,A
   \   000151   D083         POP     DPH
   \   000153   D082         POP     DPL
   \   000155   C3           CLR     C
   \   000156   E0           MOVX    A,@DPTR
   \   000157   98           SUBB    A,R0
   \   000158   A3           INC     DPTR
   \   000159   E0           MOVX    A,@DPTR
   \   00015A   99           SUBB    A,R1
   \   00015B   500F         JNC     ??osal_mem_alloc_12
    454                {
    455                  proMax[idx] = proCur[idx];
   \   00015D   12....       LCALL   ?Subroutine1 & 0xFFFF
    456                }
   \                     ??CrossCallReturnLabel_3:
   \   000160   FC           MOV     R4,A
   \   000161   A3           INC     DPTR
   \   000162   E0           MOVX    A,@DPTR
   \   000163   FD           MOV     R5,A
   \   000164   12....       LCALL   ?Subroutine6 & 0xFFFF
   \                     ??CrossCallReturnLabel_16:
   \   000167   EC           MOV     A,R4
   \   000168   F0           MOVX    @DPTR,A
   \   000169   A3           INC     DPTR
   \   00016A   ED           MOV     A,R5
   \   00016B   F0           MOVX    @DPTR,A
    457                proTot[idx]++;
   \                     ??osal_mem_alloc_12:
   \   00016C   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_22:
   \   00016F   74..         MOV     A,#proTot & 0xff
   \   000171   28           ADD     A,R0
   \   000172   F582         MOV     DPL,A
   \   000174   74..         MOV     A,#(proTot >> 8) & 0xff
   \   000176   39           ADDC    A,R1
   \   000177   F583         MOV     DPH,A
   \   000179   12....       LCALL   ?Subroutine0 & 0xFFFF
    458          
    459                /* A small-block could not be allocated in the small-block bucket.
    460                 * When this occurs significantly frequently, increase the size of the
    461                 * bucket in order to restore better worst case run times. Set the first
    462                 * profiling bucket size in proCnt[] to the small-block bucket size and
    463                 * divide proSmallBlkMiss by the corresponding proTot[] size to get % miss.
    464                 * Best worst case time on TrasmitApp was achieved at a 0-15% miss rate
    465                 * during steady state Tx load, 0% during idle and steady state Rx load.
    466                 */
    467                if ((hdr->hdr.len <= OSALMEM_SMALL_BLKSZ) && (hdr >= (theHeap + OSALMEM_BIGBLK_IDX)))
   \                     ??CrossCallReturnLabel_1:
   \   00017C   12....       LCALL   ?Subroutine4 & 0xFFFF
   \                     ??CrossCallReturnLabel_10:
   \   00017F   9411         SUBB    A,#0x11
   \   000181   E9           MOV     A,R1
   \   000182   9400         SUBB    A,#0x0
   \   000184   500F         JNC     ??CrossCallReturnLabel_2
   \   000186   C3           CLR     C
   \   000187   EE           MOV     A,R6
   \   000188   94..         SUBB    A,#(theHeap + 74) & 0xff
   \   00018A   EF           MOV     A,R7
   \   00018B   94..         SUBB    A,#((theHeap + 586) >> 8) & 0xff
   \   00018D   4006         JC      ??CrossCallReturnLabel_2
    468                {
    469                  proSmallBlkMiss++;
   \   00018F   90....       MOV     DPTR,#proSmallBlkMiss
   \   000192   12....       LCALL   ?Subroutine0 & 0xFFFF
    470                }
    471              }
    472          
    473              (void)osal_memset((uint8 *)(hdr+1), OSALMEM_ALOC, (hdr->hdr.len - OSALMEM_HDRSZ));
   \                     ??CrossCallReturnLabel_2:
   \   000195                ; Setup parameters for call to function osal_memset
   \   000195   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_7:
   \   000198   7941         MOV     R1,#0x41
   \   00019A   EE           MOV     A,R6
   \   00019B   2402         ADD     A,#0x2
   \   00019D   FA           MOV     R2,A
   \   00019E   E4           CLR     A
   \   00019F   3F           ADDC    A,R7
   \   0001A0   FB           MOV     R3,A
   \   0001A1   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    474          #endif
    475          
    476              if ((osalMemStat != 0) && (ff1 == hdr))
   \   0001A4   90....       MOV     DPTR,#osalMemStat
   \   0001A7   E0           MOVX    A,@DPTR
   \   0001A8   6021         JZ      ??osal_mem_alloc_13
   \   0001AA   90....       MOV     DPTR,#ff1
   \   0001AD   E0           MOVX    A,@DPTR
   \   0001AE   F8           MOV     R0,A
   \   0001AF   A3           INC     DPTR
   \   0001B0   E0           MOVX    A,@DPTR
   \   0001B1   F9           MOV     R1,A
   \   0001B2   EE           MOV     A,R6
   \   0001B3   68           XRL     A,R0
   \   0001B4   7002         JNZ     ??osal_mem_alloc_14
   \   0001B6   EF           MOV     A,R7
   \   0001B7   69           XRL     A,R1
   \                     ??osal_mem_alloc_14:
   \   0001B8   7011         JNZ     ??osal_mem_alloc_13
    477              {
    478                ff1 = (osalMemHdr_t *)((uint8 *)hdr + hdr->hdr.len);
   \   0001BA   12....       LCALL   ?Subroutine5 & 0xFFFF
    479              }
   \                     ??CrossCallReturnLabel_13:
   \   0001BD   EE           MOV     A,R6
   \   0001BE   28           ADD     A,R0
   \   0001BF   F8           MOV     R0,A
   \   0001C0   EF           MOV     A,R7
   \   0001C1   39           ADDC    A,R1
   \   0001C2   F9           MOV     R1,A
   \   0001C3   90....       MOV     DPTR,#ff1
   \   0001C6   E8           MOV     A,R0
   \   0001C7   F0           MOVX    @DPTR,A
   \   0001C8   A3           INC     DPTR
   \   0001C9   E9           MOV     A,R1
   \   0001CA   F0           MOVX    @DPTR,A
    480          
    481              hdr++;
   \                     ??osal_mem_alloc_13:
   \   0001CB   EE           MOV     A,R6
   \   0001CC   2402         ADD     A,#0x2
   \   0001CE   FE           MOV     R6,A
   \   0001CF   5001         JNC     ??osal_mem_alloc_7
   \   0001D1   0F           INC     R7
    482            }
    483          
    484            HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
   \                     ??osal_mem_alloc_7:
   \   0001D2   E5..         MOV     A,?V0
   \   0001D4   A2E0         MOV     C,0xE0 /* A   */.0
   \   0001D6   92AF         MOV     0xa8.7,C
    485          
    486          #if !defined ( ZBIT )
    487          #pragma diag_suppress=Pe767
    488            HAL_ASSERT(((halDataAlign_t)hdr % sizeof(halDataAlign_t)) == 0);
    489          #pragma diag_default=Pe767
    490          #else
    491            HAL_ASSERT(((halDataAlign_t)hdr % sizeof(halDataAlign_t)) == 0);
    492          #endif
    493          #ifdef DPRINTF_OSALHEAPTRACE
    494            dprintf("osal_mem_alloc(%u)->%lx:%s:%u\n", size, (unsigned) hdr, fname, lnum);
    495          #endif /* DPRINTF_OSALHEAPTRACE */
    496            return (void *)hdr;
   \   0001D8   EE           MOV     A,R6
   \   0001D9   FA           MOV     R2,A
   \   0001DA   EF           MOV     A,R7
   \   0001DB   FB           MOV     R3,A
   \   0001DC   7F06         MOV     R7,#0x6
   \   0001DE   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0001E1                REQUIRE _A_IEN0
    497          }

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine6:
   \   000000   74..         MOV     A,#proMax & 0xff
   \   000002   28           ADD     A,R0
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(proMax >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine4:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_18:
   \   000003   C3           CLR     C
   \   000004   E8           MOV     A,R0
   \   000005   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   E0           MOVX    A,@DPTR
   \   000001   2401         ADD     A,#0x1
   \   000003   F0           MOVX    @DPTR,A
   \   000004   A3           INC     DPTR
   \   000005   E0           MOVX    A,@DPTR
   \   000006   3400         ADDC    A,#0x0
   \   000008   F0           MOVX    @DPTR,A
   \   000009   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine5:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_19:
   \   000003   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine7:
   \   000000   8E82         MOV     DPL,R6
   \   000002   8F83         MOV     DPH,R7
   \   000004   E0           MOVX    A,@DPTR
   \   000005   F8           MOV     R0,A
   \   000006   A3           INC     DPTR
   \   000007   E0           MOVX    A,@DPTR
   \   000008   547F         ANL     A,#0x7f
   \   00000A   F9           MOV     R1,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine3:
   \   000000   12....       LCALL   ?Subroutine7 & 0xFFFF
   \                     ??CrossCallReturnLabel_17:
   \   000003   E8           MOV     A,R0
   \   000004   24FE         ADD     A,#-0x2
   \   000006   FC           MOV     R4,A
   \   000007   E9           MOV     A,R1
   \   000008   34FF         ADDC    A,#-0x1
   \   00000A   FD           MOV     R5,A
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine2:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_23:
   \   000003   74..         MOV     A,#proCnt & 0xff
   \   000005   28           ADD     A,R0
   \   000006   F582         MOV     DPL,A
   \   000008   74..         MOV     A,#(proCnt >> 8) & 0xff
   \   00000A   39           ADDC    A,R1
   \   00000B   F583         MOV     DPH,A
   \   00000D   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine9:
   \   000000   EA           MOV     A,R2
   \   000001   25E0         ADD     A,0xE0 /* A   */
   \   000003   F8           MOV     R0,A
   \   000004   E4           CLR     A
   \   000005   33           RLC     A
   \   000006   F9           MOV     R1,A
   \   000007   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine1:
   \   000000   12....       LCALL   ?Subroutine8 & 0xFFFF
   \                     ??CrossCallReturnLabel_21:
   \   000003   F582         MOV     DPL,A
   \   000005   74..         MOV     A,#(proCur >> 8) & 0xff
   \   000007   39           ADDC    A,R1
   \   000008   F583         MOV     DPH,A
   \   00000A   E0           MOVX    A,@DPTR
   \   00000B   22           RET

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine8:
   \   000000   12....       LCALL   ?Subroutine9 & 0xFFFF
   \                     ??CrossCallReturnLabel_24:
   \   000003   74..         MOV     A,#proCur & 0xff
   \   000005   28           ADD     A,R0
   \   000006   22           RET
    498          
    499          /**************************************************************************************************
    500           * @fn          osal_mem_free
    501           *
    502           * @brief       This function implements the OSAL dynamic memory de-allocation functionality.
    503           *
    504           * input parameters
    505           *
    506           * @param ptr - A valid pointer (i.e. a pointer returned by osal_mem_alloc()) to the memory to free.
    507           *
    508           * output parameters
    509           *
    510           * None.
    511           *
    512           * @return      None.
    513           */
    514          #ifdef DPRINTF_OSALHEAPTRACE
    515          void osal_mem_free_dbg(void *ptr, const char *fname, unsigned lnum)
    516          #else /* DPRINTF_OSALHEAPTRACE */

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
    517          void osal_mem_free(void *ptr)
   \                     osal_mem_free:
    518          #endif /* DPRINTF_OSALHEAPTRACE */
    519          {
   \   000000                REQUIRE ?V0
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 0
    520            osalMemHdr_t *hdr = (osalMemHdr_t *)ptr - 1;
   \   000005   EA           MOV     A,R2
   \   000006   24FE         ADD     A,#-0x2
   \   000008   FE           MOV     R6,A
   \   000009   EB           MOV     A,R3
   \   00000A   34FF         ADDC    A,#-0x1
   \   00000C   FF           MOV     R7,A
    521            halIntState_t intState;
    522          
    523          #ifdef DPRINTF_OSALHEAPTRACE
    524            dprintf("osal_mem_free(%lx):%s:%u\n", (unsigned) ptr, fname, lnum);
    525          #endif /* DPRINTF_OSALHEAPTRACE */
    526          
    527            HAL_ASSERT(((uint8 *)ptr >= (uint8 *)theHeap) && ((uint8 *)ptr < (uint8 *)theHeap+MAXMEMHEAP));
   \   00000D   C3           CLR     C
   \   00000E   EA           MOV     A,R2
   \   00000F   94..         SUBB    A,#theHeap & 0xff
   \   000011   EB           MOV     A,R3
   \   000012   94..         SUBB    A,#(theHeap >> 8) & 0xff
   \   000014   4009         JC      ??osal_mem_free_0
   \   000016   C3           CLR     C
   \   000017   EA           MOV     A,R2
   \   000018   94..         SUBB    A,#(theHeap + 232) & 0xff
   \   00001A   EB           MOV     A,R3
   \   00001B   94..         SUBB    A,#((theHeap + 1000) >> 8) & 0xff
   \   00001D   4003         JC      ??osal_mem_free_1
   \                     ??osal_mem_free_0:
   \   00001F                ; Setup parameters for call to function halAssertHandler
   \   00001F   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    528            HAL_ASSERT(hdr->hdr.inUse);
   \                     ??osal_mem_free_1:
   \   000022   8E82         MOV     DPL,R6
   \   000024   8F83         MOV     DPH,R7
   \   000026   A3           INC     DPTR
   \   000027   E0           MOVX    A,@DPTR
   \   000028   5480         ANL     A,#0x80
   \   00002A   7003         JNZ     ??osal_mem_free_2
   \   00002C                ; Setup parameters for call to function halAssertHandler
   \   00002C   12....       LCALL   `??halAssertHandler::?relay`; Banked call to: halAssertHandler
    529          
    530            HAL_ENTER_CRITICAL_SECTION( intState );  // Hold off interrupts.
   \                     ??osal_mem_free_2:
   \   00002F   A2AF         MOV     C,0xa8.7
   \   000031   E4           CLR     A
   \   000032   33           RLC     A
   \   000033   F5..         MOV     ?V0,A
   \   000035   C2AF         CLR     0xa8.7
    531            hdr->hdr.inUse = FALSE;
   \   000037   8E82         MOV     DPL,R6
   \   000039   8F83         MOV     DPH,R7
   \   00003B   A3           INC     DPTR
   \   00003C   E0           MOVX    A,@DPTR
   \   00003D   547F         ANL     A,#0x7f
   \   00003F   F0           MOVX    @DPTR,A
    532          
    533            if (ff1 > hdr)
   \   000040   90....       MOV     DPTR,#ff1
   \   000043   E0           MOVX    A,@DPTR
   \   000044   F8           MOV     R0,A
   \   000045   A3           INC     DPTR
   \   000046   E0           MOVX    A,@DPTR
   \   000047   F9           MOV     R1,A
   \   000048   EE           MOV     A,R6
   \   000049   98           SUBB    A,R0
   \   00004A   EF           MOV     A,R7
   \   00004B   99           SUBB    A,R1
   \   00004C   500C         JNC     ??osal_mem_free_3
    534            {
    535              ff1 = hdr;
   \   00004E   EE           MOV     A,R6
   \   00004F   F8           MOV     R0,A
   \   000050   EF           MOV     A,R7
   \   000051   F9           MOV     R1,A
   \   000052   90....       MOV     DPTR,#ff1
   \   000055   E8           MOV     A,R0
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   E9           MOV     A,R1
   \   000059   F0           MOVX    @DPTR,A
    536            }
    537          
    538          #if OSALMEM_PROFILER
    539          #if !OSALMEM_PROFILER_LL
    540            if (osalMemStat != 0)  // Don't profile until after the LL block is filled.
   \                     ??osal_mem_free_3:
   \   00005A   90....       MOV     DPTR,#osalMemStat
   \   00005D   E0           MOVX    A,@DPTR
   \   00005E   602A         JZ      ??osal_mem_free_4
    541          #endif
    542            {
    543              uint8 idx;
    544          
    545              for (idx = 0; idx < OSALMEM_PROMAX; idx++)
   \   000060   7A00         MOV     R2,#0x0
    546              {
    547                if (hdr->hdr.len <= proCnt[idx])
   \                     ??osal_mem_free_5:
   \   000062   12....       LCALL   ?Subroutine2 & 0xFFFF
    548                {
    549                  break;
    550                }
    551              }
   \                     ??CrossCallReturnLabel_6:
   \   000065   C082         PUSH    DPL
   \   000067   C083         PUSH    DPH
   \   000069   12....       LCALL   ?Subroutine5 & 0xFFFF
   \                     ??CrossCallReturnLabel_14:
   \   00006C   D083         POP     DPH
   \   00006E   D082         POP     DPL
   \   000070   C3           CLR     C
   \   000071   E0           MOVX    A,@DPTR
   \   000072   98           SUBB    A,R0
   \   000073   A3           INC     DPTR
   \   000074   E0           MOVX    A,@DPTR
   \   000075   99           SUBB    A,R1
   \   000076   5007         JNC     ??osal_mem_free_6
   \   000078   0A           INC     R2
   \   000079   EA           MOV     A,R2
   \   00007A   C3           CLR     C
   \   00007B   9408         SUBB    A,#0x8
   \   00007D   40E3         JC      ??osal_mem_free_5
    552          
    553              proCur[idx]--;
   \                     ??osal_mem_free_6:
   \   00007F   12....       LCALL   ?Subroutine1 & 0xFFFF
    554            }
   \                     ??CrossCallReturnLabel_4:
   \   000082   24FF         ADD     A,#-0x1
   \   000084   F0           MOVX    @DPTR,A
   \   000085   A3           INC     DPTR
   \   000086   E0           MOVX    A,@DPTR
   \   000087   34FF         ADDC    A,#-0x1
   \   000089   F0           MOVX    @DPTR,A
    555          
    556            (void)osal_memset((uint8 *)(hdr+1), OSALMEM_REIN, (hdr->hdr.len - OSALMEM_HDRSZ) );
   \                     ??osal_mem_free_4:
   \   00008A                ; Setup parameters for call to function osal_memset
   \   00008A   12....       LCALL   ?Subroutine3 & 0xFFFF
   \                     ??CrossCallReturnLabel_8:
   \   00008D   7946         MOV     R1,#0x46
   \   00008F   EE           MOV     A,R6
   \   000090   2402         ADD     A,#0x2
   \   000092   FA           MOV     R2,A
   \   000093   E4           CLR     A
   \   000094   3F           ADDC    A,R7
   \   000095   FB           MOV     R3,A
   \   000096   12....       LCALL   `??osal_memset::?relay`; Banked call to: osal_memset
    557          #endif
    558          #if OSALMEM_METRICS
    559            memAlo -= hdr->hdr.len;
    560            blkFree++;
    561          #endif
    562          
    563            HAL_EXIT_CRITICAL_SECTION( intState );  // Re-enable interrupts.
   \   000099   E5..         MOV     A,?V0
   \   00009B   A2E0         MOV     C,0xE0 /* A   */.0
   \   00009D   92AF         MOV     0xa8.7,C
    564          }
   \   00009F   7F01         MOV     R7,#0x1
   \   0000A1   02....       LJMP    ?BANKED_LEAVE_XDATA
   \   0000A4                REQUIRE _A_IEN0

   \                                 In  segment XDATA_ID, align 1, keep-with-next
   \                     `?<Initializer for proCnt>`:
   \   000000   1000         DW 16
   \   000002   3000         DW 48
   \   000004   7000         DW 112
   \   000006   B000         DW 176
   \   000008   C000         DW 192
   \   00000A   E000         DW 224
   \   00000C   0001         DW 256
   \   00000E   FFFF         DW 65535

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_kick::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_kick

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_alloc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_alloc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??osal_mem_free::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    osal_mem_free
    565          
    566          #if OSALMEM_METRICS
    567          /*********************************************************************
    568           * @fn      osal_heap_block_max
    569           *
    570           * @brief   Return the maximum number of blocks ever allocated at once.
    571           *
    572           * @param   none
    573           *
    574           * @return  Maximum number of blocks ever allocated at once.
    575           */
    576          uint16 osal_heap_block_max( void )
    577          {
    578            return blkMax;
    579          }
    580          
    581          /*********************************************************************
    582           * @fn      osal_heap_block_cnt
    583           *
    584           * @brief   Return the current number of blocks now allocated.
    585           *
    586           * @param   none
    587           *
    588           * @return  Current number of blocks now allocated.
    589           */
    590          uint16 osal_heap_block_cnt( void )
    591          {
    592            return blkCnt;
    593          }
    594          
    595          /*********************************************************************
    596           * @fn      osal_heap_block_free
    597           *
    598           * @brief   Return the current number of free blocks.
    599           *
    600           * @param   none
    601           *
    602           * @return  Current number of free blocks.
    603           */
    604          uint16 osal_heap_block_free( void )
    605          {
    606            return blkFree;
    607          }
    608          
    609          /*********************************************************************
    610           * @fn      osal_heap_mem_used
    611           *
    612           * @brief   Return the current number of bytes allocated.
    613           *
    614           * @param   none
    615           *
    616           * @return  Current number of bytes allocated.
    617           */
    618          uint16 osal_heap_mem_used( void )
    619          {
    620            return memAlo;
    621          }
    622          #endif
    623          
    624          #if defined (ZTOOL_P1) || defined (ZTOOL_P2)
    625          /*********************************************************************
    626           * @fn      osal_heap_high_water
    627           *
    628           * @brief   Return the highest byte ever allocated in the heap.
    629           *
    630           * @param   none
    631           *
    632           * @return  Highest number of bytes ever used by the stack.
    633           */
    634          uint16 osal_heap_high_water( void )
    635          {
    636          #if ( OSALMEM_METRICS )
    637            return memMax;
    638          #else
    639            return MAXMEMHEAP;
    640          #endif
    641          }
    642          #endif
    643          
    644          /**************************************************************************************************
    645          */

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2     24   osal_mem_alloc
        0     14   -> osal_memset
      2     19   osal_mem_free
        0      9   -> halAssertHandler
        0      9   -> osal_memset
      2      0   osal_mem_init
        2      0   -> osal_memset
      0     10   osal_mem_kick
        0     10   -> halAssertHandler
        0     10   -> osal_mem_alloc
        0     10   -> osal_mem_free


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
      16  ?<Initializer for proCnt>
      10  ?Subroutine0
      12  ?Subroutine1
      14  ?Subroutine2
      12  ?Subroutine3
       6  ?Subroutine4
       4  ?Subroutine5
      11  ?Subroutine6
      12  ?Subroutine7
       7  ?Subroutine8
       8  ?Subroutine9
       1  _A_IEN0
       2  ff1
       1  osalMemStat
     481  osal_mem_alloc
       6  osal_mem_alloc::?relay
     164  osal_mem_free
       6  osal_mem_free::?relay
      67  osal_mem_init
       6  osal_mem_init::?relay
      79  osal_mem_kick
       6  osal_mem_kick::?relay
      16  proCnt
      16  proCur
      16  proMax
       2  proSmallBlkMiss
      16  proTot
    1000  theHeap

 
   887 bytes in segment BANKED_CODE
    24 bytes in segment BANK_RELAYS
     1 byte  in segment SFR_AN
    16 bytes in segment XDATA_I
    16 bytes in segment XDATA_ID
 1 002 bytes in segment XDATA_N
    51 bytes in segment XDATA_Z
 
   927 bytes of CODE  memory
     0 bytes of DATA  memory (+ 1 byte shared)
 1 069 bytes of XDATA memory

Errors: none
Warnings: none
