###############################################################################
#
# IAR C/C++ Compiler V9.30.1.3056 for 8051                06/Jul/2016  15:51:35
# Copyright 2004-2015 IAR Systems AB.
# Standalone license - IAR Embedded Workbench for 8051
#
#    Core               =  plain
#    Code model         =  banked
#    Data model         =  large
#    Calling convention =  xdata reentrant
#    Constant location  =  data_rom
#    Dptr setup         =  1,16
#                          
#    Source file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\Source\SLS.c
#    Command line       =  
#        -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\Source\znp.cfg"
#        (-DMAC_CFG_APP_PENDING_QUEUE=TRUE
#        "-DZSTACK_DEVICE_BUILD=(DEVICE_BUILD_COORDINATOR | DEVICE_BUILD_ROUTER
#        | DEVICE_BUILD_ENDDEVICE)" -DNWK_AUTO_POLL -DZNP_RUN_WDOG=FALSE
#        -DZNP_UART_BAUD=HAL_UART_BR_115200 -DZIGBEEPRO -DZIGBEE_FRAGMENTATION
#        -DINTER_PAN -DOSAL_CLOCK -DOSAL_SAPI=FALSE -DSAPI_CB_FUNC=FALSE
#        -DHOLD_AUTO_START -DNV_RESTORE -DNV_INIT -DNUM_DISC_ATTEMPTS=0
#        -DMT_UTIL_FUNC -DMT_SYS_FUNC -DMT_AF_FUNC -DMT_SAPI_FUNC
#        -DMT_SAPI_CB_FUNC -DMT_ZDO_CB_FUNC -DMT_ZDO_FUNC -DMT_ZDO_MGMT
#        -DMT_ZDO_EXTENSIONS -DMT_APP_FUNC) -f "C:\Texas Instruments\Z-Stack
#        Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wConfig.cfg"
#        (-DZIGBEEPRO -DSECURE=1 -DZG_SECURE_DYNAMIC=0 -DREFLECTOR
#        -DDEFAULT_CHANLIST=0x00000800 -DZDAPP_CONFIG_PAN_ID=0xFFFF
#        -DNWK_START_DELAY=100 -DEXTENDED_JOINING_RANDOM_MASK=0x007F
#        -DBEACON_REQUEST_DELAY=100 -DBEACON_REQ_DELAY_MASK=0x00FF
#        -DLINK_STATUS_JITTER_MASK=0x007F -DROUTE_EXPIRY_TIME=30
#        -DAPSC_ACK_WAIT_DURATION_POLLED=3000 -DNWK_INDIRECT_MSG_TIMEOUT=7
#        -DMAX_RREQ_ENTRIES=8 -DAPSC_MAX_FRAME_RETRIES=3
#        -DNWK_MAX_DATA_RETRIES=2 -DMAX_POLL_FAILURE_RETRIES=2 -DMAX_BCAST=9
#        -DAPS_MAX_GROUPS=16 -DMAX_RTG_ENTRIES=40 -DNWK_MAX_BINDING_ENTRIES=4
#        -DMAX_BINDING_CLUSTER_IDS=4 "-DDEFAULT_KEY={0x01, 0x03, 0x05, 0x07,
#        0x09, 0x0B, 0x0D, 0x0F, 0x00, 0x02, 0x04, 0x06, 0x08, 0x0A, 0x0C,
#        0x0D}" -DMAC_MAX_FRAME_SIZE=116 -DZDNWKMGR_MIN_TRANSMISSIONS=20
#        "-DCONST=const __code" -DGENERIC=__generic -DRFD_RCVC_ALWAYS_ON=FALSE
#        -DPOLL_RATE=1000 -DQUEUED_POLL_RATE=100 -DRESPONSE_POLL_RATE=100
#        -DREJOIN_POLL_RATE=440) -f "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\Tools\CC2530DB\f8wZCL.cfg"
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\Source\SLS.c" -D FEATURE_SYSTEM_STATS -D
#        POWER_SAVING -lC "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" -lA "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List" --diag_suppress
#        Pe001,Pa010 -o "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj" -e --no_code_motion
#        --debug --core=plain --dptr=16,1 --data_model=large
#        --code_model=banked --calling_convention=xdata_reentrant
#        --place_constants=data_rom --nr_virtual_regs 16 -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\CC253x\..\Source\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\SE\Source\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\ZMain\TI2530ZNP\" -I "C:\Texas
#        Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\hal\target\CC2530ZNP\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\high_level\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mac\low_level\srf04\single_chip\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\mt\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\osal\include\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\saddr\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\services\sdata\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\af\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\nwk\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sapi\"
#        -I "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sec\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\sys\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zcl\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\stack\zdo\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\" -I
#        "C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\..\..\..\..\Components\zmac\f8w\"
#        -Ohz --require_prototypes
#    List file          =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\List\SLS.lst
#    Object file        =  
#        C:\Texas Instruments\Z-Stack Mesh
#        1.0.0\Projects\zstack\ZNP\CC253x\CC2530-Debug\Obj\SLS.r51
#
###############################################################################

C:\Texas Instruments\Z-Stack Mesh 1.0.0\Projects\zstack\ZNP\Source\SLS.c
      1          #include "SLS.h"
      2          #include "hal_key.h"
      3          #include "hal_lcd.h"
      4          #include "hal_led.h"
      5          #include "hal_sleep.h"
      6          #include "hal_timer.h"
      7          #include "hal_types.h"
      8          #include "hal_uart.h"
      9          #include "hal_defs.h"
     10          #include "znp_app.h"
     11          #include "OSAL.h"
     12          

   \                                 In  segment XDATA_Z, align 1, keep-with-next
     13          uint8 SLS_TaskID;
   \                     SLS_TaskID:
   \   000000                DS 1
   \   000001                REQUIRE __INIT_XDATA_Z
     14          
     15          void initUart(halUARTCBack_t pf);
     16          void SLS_UartCback(uint8 port, uint8 event);
     17          
     18          static void LedTest( int i, unsigned char val );
     19          
     20          static void LedTest( int i, unsigned char val ){
                             ^
Warning[Pe177]: function "LedTest" was declared but never referenced
     21            P0DIR |= 0x03;
     22            if(i==1)
     23              P0_1 = val;
     24            else
     25              P0_0 = val;
     26          }
     27          
     28          /**************************************************************************************************
     29          * @fn      Hal_Init
     30          *
     31          * @brief   Hal Initialization function.
     32          *
     33          * @param   task_id - Hal TaskId
     34          *
     35          * @return  None
     36          **************************************************************************************************/

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     37          void SLS_Init(uint8 task_id)
   \                     SLS_Init:
     38          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 0
     39          	/* Register task ID */
     40          	SLS_TaskID = task_id;
   \   000004   E9           MOV     A,R1
   \   000005   90....       MOV     DPTR,#SLS_TaskID
   \   000008   F0           MOVX    @DPTR,A
     41              //initUart(SLS_UartCback);
     42          }
   \   000009                REQUIRE ?Subroutine0
   \   000009                ; // Fall through to label ?Subroutine0

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
   \                     ?Subroutine0:
   \   000000   D083         POP     DPH
   \   000002   D082         POP     DPL
   \   000004   02....       LJMP    ?BRET
     43          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     44          void SLS_UartCback(uint8 port, uint8 event)
   \                     SLS_UartCback:
     45          {
   \   000000                ; Saved register size: 0
   \   000000                ; Auto size: 0
     46                  
     47          	switch (event) {
     48          	case HAL_UART_RX_FULL:
     49          	case HAL_UART_RX_ABOUT_FULL:
     50          	case HAL_UART_RX_TIMEOUT:
     51          		break;
     52          
     53          	case HAL_UART_TX_EMPTY:
     54          		break;
     55          
     56          	default:
     57          		break;
     58          	}
     59          }
   \   000000   02....       LJMP    ?BRET
     60          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     61          void initUart(halUARTCBack_t pf)
   \                     initUart:
     62          {
   \   000000   C082         PUSH    DPL
   \   000002   C083         PUSH    DPH
   \   000004                ; Saved register size: 2
   \   000004                ; Auto size: 29
   \   000004   74E3         MOV     A,#-0x1d
   \   000006   12....       LCALL   ?ALLOC_XSTACK8
     63            	  halUARTCfg_t uartConfig;
     64          
     65          	  uartConfig.configured = TRUE;
   \   000009   85..82       MOV     DPL,?XSP + 0
   \   00000C   85..83       MOV     DPH,?XSP + 1
   \   00000F   7401         MOV     A,#0x1
   \   000011   F0           MOVX    @DPTR,A
     66          	  uartConfig.baudRate = HAL_UART_BR_9600;//ZNP_UART_BAUD;
   \   000012   12....       LCALL   ?XSTACK_DISP0_8
   \   000015   E4           CLR     A
   \   000016   F0           MOVX    @DPTR,A
     67          	  uartConfig.flowControl = TRUE;
   \   000017   7402         MOV     A,#0x2
   \   000019   12....       LCALL   ?XSTACK_DISP0_8
   \   00001C   7401         MOV     A,#0x1
   \   00001E   F0           MOVX    @DPTR,A
     68          	  uartConfig.flowControlThreshold = 48;// HAL_UART_FLOW_THRESHOLD;
   \   00001F   7403         MOV     A,#0x3
   \   000021   12....       LCALL   ?XSTACK_DISP0_8
   \   000024   7430         MOV     A,#0x30
   \   000026   F0           MOVX    @DPTR,A
   \   000027   A3           INC     DPTR
   \   000028   E4           CLR     A
   \   000029   F0           MOVX    @DPTR,A
     69          	  uartConfig.rx.maxBufSize = 128;// HAL_UART_RX_BUF_SIZE;
   \   00002A   740A         MOV     A,#0xa
   \   00002C   12....       LCALL   ?XSTACK_DISP0_8
   \   00002F   7480         MOV     A,#-0x80
   \   000031   F0           MOVX    @DPTR,A
   \   000032   A3           INC     DPTR
   \   000033   E4           CLR     A
   \   000034   F0           MOVX    @DPTR,A
     70          	  uartConfig.tx.maxBufSize = 128;// HAL_UART_TX_BUF_SIZE;
   \   000035   7412         MOV     A,#0x12
   \   000037   12....       LCALL   ?XSTACK_DISP0_8
   \   00003A   7480         MOV     A,#-0x80
   \   00003C   F0           MOVX    @DPTR,A
   \   00003D   A3           INC     DPTR
   \   00003E   E4           CLR     A
   \   00003F   F0           MOVX    @DPTR,A
     71          	  uartConfig.idleTimeout = 6;// HAL_UART_IDLE_TIMEOUT;
   \   000040   7405         MOV     A,#0x5
   \   000042   12....       LCALL   ?XSTACK_DISP0_8
   \   000045   7406         MOV     A,#0x6
   \   000047   F0           MOVX    @DPTR,A
     72          	  uartConfig.intEnable = TRUE;
   \   000048   7416         MOV     A,#0x16
   \   00004A   12....       LCALL   ?XSTACK_DISP0_8
   \   00004D   7401         MOV     A,#0x1
   \   00004F   F0           MOVX    @DPTR,A
     73          	  uartConfig.callBackFunc = pf;
   \   000050   741B         MOV     A,#0x1b
   \   000052   12....       LCALL   ?XSTACK_DISP0_8
   \   000055   EA           MOV     A,R2
   \   000056   F0           MOVX    @DPTR,A
   \   000057   A3           INC     DPTR
   \   000058   EB           MOV     A,R3
   \   000059   F0           MOVX    @DPTR,A
     74          	  HalUARTOpen(HAL_UART_PORT_0, &uartConfig);
   \   00005A                ; Setup parameters for call to function HalUARTOpen
   \   00005A   AA..         MOV     R2,?XSP + 0
   \   00005C   AB..         MOV     R3,?XSP + 1
   \   00005E   7900         MOV     R1,#0x0
   \   000060   12....       LCALL   `??HalUARTOpen::?relay`; Banked call to: HalUARTOpen
     75          }
   \   000063   741D         MOV     A,#0x1d
   \   000065   12....       LCALL   ?DEALLOC_XSTACK8
   \   000068   80..         SJMP    ?Subroutine0
     76          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     77          void TestUARTFunc(void){
   \                     TestUARTFunc:
   \   000000   74F7         MOV     A,#-0x9
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 9
   \   000005                ; Auto size: 6
   \   000005   74FA         MOV     A,#-0x6
   \   000007   12....       LCALL   ?ALLOC_XSTACK8
     78            
     79                   uint8 buf[] = { 0x30, 0x31, 0x32, 0x33, 0x34, 0x35 };
   \   00000A   90....       MOV     DPTR,#`?<Constant {48, 49, 50, 51, 52, 53}>`
   \   00000D   AC..         MOV     R4,?XSP + 0
   \   00000F   AD..         MOV     R5,?XSP + 1
   \   000011   7406         MOV     A,#0x6
   \   000013   12....       LCALL   ?MOVE_LONG8_XDATA_XDATA
     80                   int i =10;
   \   000016   7E0A         MOV     R6,#0xa
   \   000018   FF           MOV     R7,A
   \   000019   800D         SJMP    ??TestUARTFunc_0
     81           	while (i-- >0)
     82           	{
     83           		HalUARTWrite(HAL_UART_PORT_1, buf, 6);
   \                     ??TestUARTFunc_1:
   \   00001B                ; Setup parameters for call to function HalUARTWrite
   \   00001B   7C06         MOV     R4,#0x6
   \   00001D   7D00         MOV     R5,#0x0
   \   00001F   AA..         MOV     R2,?XSP + 0
   \   000021   AB..         MOV     R3,?XSP + 1
   \   000023   7901         MOV     R1,#0x1
   \   000025   12....       LCALL   `??HalUARTWrite::?relay`; Banked call to: HalUARTWrite
     84           	}
   \                     ??TestUARTFunc_0:
   \   000028   EE           MOV     A,R6
   \   000029   F8           MOV     R0,A
   \   00002A   EF           MOV     A,R7
   \   00002B   F9           MOV     R1,A
   \   00002C   E8           MOV     A,R0
   \   00002D   24FF         ADD     A,#-0x1
   \   00002F   1E           DEC     R6
   \   000030   E9           MOV     A,R1
   \   000031   34FF         ADDC    A,#-0x1
   \   000033   FF           MOV     R7,A
   \   000034   C3           CLR     C
   \   000035   E8           MOV     A,R0
   \   000036   9401         SUBB    A,#0x1
   \   000038   E9           MOV     A,R1
   \   000039   9400         SUBB    A,#0x0
   \   00003B   A2D2         MOV     C,0xD0 /* PSW */.2
   \   00003D   65D0         XRL     A,PSW
   \   00003F   33           RLC     A
   \   000040   50D9         JNC     ??TestUARTFunc_1
     85          }
   \   000042   7406         MOV     A,#0x6
   \   000044   12....       LCALL   ?DEALLOC_XSTACK8
   \   000047   7F01         MOV     R7,#0x1
   \   000049   02....       LJMP    ?BANKED_LEAVE_XDATA
     86          

   \                                 In  segment BANKED_CODE, align 1, keep-with-next
     87          uint16 SLS_ProcessEvent(uint8 task_id, uint16 events)
   \                     SLS_ProcessEvent:
     88          {
   \   000000                REQUIRE ?V0
   \   000000                REQUIRE ?V1
   \   000000   74F6         MOV     A,#-0xa
   \   000002   12....       LCALL   ?BANKED_ENTER_XDATA
   \   000005                ; Saved register size: 10
   \   000005                ; Auto size: 0
   \   000005   EA           MOV     A,R2
   \   000006   FE           MOV     R6,A
   \   000007   EB           MOV     A,R3
   \   000008   FF           MOV     R7,A
     89          	uint8 *msgPtr;
     90          
     91          	(void)task_id;  // Intentionally unreferenced parameter
     92          
     93          	if (events & SYS_EVENT_MSG)
   \   000009   5480         ANL     A,#0x80
   \   00000B   6019         JZ      ??SLS_ProcessEvent_0
     94          	{
     95          		msgPtr = osal_msg_receive(SLS_TaskID);
   \   00000D                ; Setup parameters for call to function osal_msg_receive
   \   00000D   8003         SJMP    ??SLS_ProcessEvent_1
     96          
     97          		while (msgPtr)
     98          		{
     99          			/* Do something here - for now, just deallocate the msg and move on */
    100          
    101          			/* De-allocate */
    102          			osal_msg_deallocate(msgPtr);
   \                     ??SLS_ProcessEvent_2:
   \   00000F                ; Setup parameters for call to function osal_msg_deallocate
   \   00000F   12....       LCALL   `??osal_msg_deallocate::?relay`; Banked call to: osal_msg_deallocate
    103          			/* Next */
    104          			msgPtr = osal_msg_receive(SLS_TaskID);
   \   000012                ; Setup parameters for call to function osal_msg_receive
   \                     ??SLS_ProcessEvent_1:
   \   000012   90....       MOV     DPTR,#SLS_TaskID
   \   000015   E0           MOVX    A,@DPTR
   \   000016   F9           MOV     R1,A
   \   000017   12....       LCALL   `??osal_msg_receive::?relay`; Banked call to: osal_msg_receive
    105          		}
   \   00001A   EA           MOV     A,R2
   \   00001B   4B           ORL     A,R3
   \   00001C   70F1         JNZ     ??SLS_ProcessEvent_2
    106          		return events ^ SYS_EVENT_MSG;
   \   00001E   EE           MOV     A,R6
   \   00001F   FA           MOV     R2,A
   \   000020   EF           MOV     A,R7
   \   000021   6480         XRL     A,#0x80
   \   000023   FB           MOV     R3,A
   \   000024   8004         SJMP    ??SLS_ProcessEvent_3
    107          	}
    108          
    109          	return 0;
   \                     ??SLS_ProcessEvent_0:
   \   000026   7A00         MOV     R2,#0x0
   \   000028   7B00         MOV     R3,#0x0
   \                     ??SLS_ProcessEvent_3:
   \   00002A   7F02         MOV     R7,#0x2
   \   00002C   02....       LJMP    ?BANKED_LEAVE_XDATA
    110          }

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SLS_Init::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SLS_Init

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SLS_UartCback::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SLS_UartCback

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??initUart::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    initUart

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??TestUARTFunc::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    TestUARTFunc

   \                                 In  segment BANK_RELAYS, align 1
   \                     `??SLS_ProcessEvent::?relay`:
   \   000000   12....       LCALL   ?BDISPATCH
   \   000003   ......       DC24    SLS_ProcessEvent

   \                                 In  segment XDATA_ROM_C, align 1
   \                     `?<Constant {48, 49, 50, 51, 52, 53}>`:
   \   000000   30           DB 48
   \   000001   31           DB 49
   \   000002   32           DB 50
   \   000003   33           DB 51
   \   000004   34           DB 52
   \   000005   35           DB 53

   Maximum stack usage in bytes:

   ISTACK XSTACK Function
   ------ ------ --------
      2      0   SLS_Init
      0     10   SLS_ProcessEvent
        0     10   -> osal_msg_deallocate
        0     10   -> osal_msg_receive
      0      0   SLS_UartCback
      0     15   TestUARTFunc
        0     15   -> HalUARTWrite
      2     29   initUart
        2     29   -> HalUARTOpen


   Segment part sizes:

   Bytes  Function/Label
   -----  --------------
       6  ?<Constant {48, 49, 50, 51, 52, 53}>
       7  ?Subroutine0
       9  SLS_Init
       6  SLS_Init::?relay
      47  SLS_ProcessEvent
       6  SLS_ProcessEvent::?relay
       1  SLS_TaskID
       3  SLS_UartCback
       6  SLS_UartCback::?relay
      76  TestUARTFunc
       6  TestUARTFunc::?relay
     106  initUart
       6  initUart::?relay

 
 248 bytes in segment BANKED_CODE
  30 bytes in segment BANK_RELAYS
   6 bytes in segment XDATA_ROM_C
   1 byte  in segment XDATA_Z
 
 278 bytes of CODE  memory
   6 bytes of CONST memory
   1 byte  of XDATA memory

Errors: none
Warnings: 1
